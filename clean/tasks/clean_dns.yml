---

- name: clean/dns | hosts_to_clean
  debug: msg="{{hosts_to_clean}}"

- block:
    - name: clean/dns/nsupdate | Delete DNS entries from bind (nsupdate)
      block:
        - name: clean/dns/nsupdate | Delete A records
          nsupdate:
            key_name: "{{bind9[buildenv].key_name}}"
            key_secret: "{{bind9[buildenv].key_secret}}"
            server: "{{bind9[buildenv].server}}"
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            state: "absent"
            record: "{{item.name}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.' + cluster_vars.dns_nameserver_zone, '\\1')}}"
          with_items: "{{ hosts_to_clean }}"

        - name: clean/dns/nsupdate | Delete CNAME records
          nsupdate:
            key_name: "{{bind9[buildenv].key_name}}"
            key_secret: "{{bind9[buildenv].key_secret}}"
            server: "{{bind9[buildenv].server}}"
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            record: "{{item.name | regex_replace('-(?!.*-).*')}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.' + cluster_vars.dns_nameserver_zone, '\\1')}}"
            value:  "{{item.name}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.' + cluster_vars.dns_nameserver_zone, '\\1')}}"
            type: CNAME
            state: absent
          with_items: "{{ hosts_to_clean }}"
          vars:
            cname_to_check: "{{ item.name | regex_replace('-(?!.*-).*') }}.{{cluster_vars.dns_user_domain}}."
            cname_value: "{{ lookup('dig', cname_to_check, 'qtype=CNAME', '@'+bind9[buildenv].server) }}"
          when: (item.name + '.' + cluster_vars.dns_user_domain + "." == cname_value)
      when: cluster_vars.dns_server == "nsupdate"

    - name: clean/dns/route53 | Delete DNS entries from route53
      block:
        - name: clean/dns/route53 | Get A records
          route53:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            state: "get"
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            record: "{{item.name}}.{{cluster_vars.dns_user_domain}}"
            type: "A"
            private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
          register: r__route53_a
          with_items: "{{ hosts_to_clean }}"

        - name: clean/dns/route53 | Delete A records
          route53:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            state: "absent"
            zone: "{{ item.set.zone }}"
            record: "{{ item.set.record }}"
            type: "{{ item.set.type }}"
            ttl: "{{ item.set.ttl }}"
            value: ["{{ item.set.value }}"]
            private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
          with_items: "{{ r__route53_a.results }}"
          when: item.set.value is defined

        - name: clean/dns/route53 | Get CNAME records
          route53:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            state: "get"
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            record: "{{item.name | regex_replace('-(?!.*-).*')}}.{{cluster_vars.dns_user_domain}}"
            type: "CNAME"
            private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
          register: r__route53_cname
          with_items: "{{ hosts_to_clean }}"

        - name: clean/dns/route53 | Delete CNAME records
          route53:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            state: "absent"
            zone: "{{ item.1.set.zone }}"
            record: "{{ item.1.set.record }}"
            type: "{{ item.1.set.type }}"
            ttl: "{{ item.1.set.ttl }}"
            value: ["{{ item.1.set.value }}"]
            private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
          with_nested:
            - "{{ hosts_to_clean }}"
            - "{{ r__route53_cname.results }}"
          when: (item.1.set.value is defined)  and  ((item.0.name | regex_replace('-(?!.*-).*')) == (item.1.set.record | regex_replace('^(.*?)\\..*$', '\\1')))  and  (item.0.name == item.1.set.value | regex_replace('^(.*?)\\..*$', '\\1'))
      when: cluster_vars.dns_server == "route53"


  #   - name: clean/dns/clouddns | Delete DNS entries from clouddns
  #     block:
  #       - name: clean/dns/clouddns | Get GCP Managed Zone
  #         gcp_dns_managed_zone_info:
  #           auth_kind: serviceaccount
  #           dns_name: "{{cluster_vars.dns_user_domain}}"
  #           project: "{{cluster_vars[buildenv].vpc_network_project}}"
  #           service_account_file: "{{gcp_credentials_file}}"
  #         register: r__gcp_dns_managed_zone_info
  #         become: false
  #         delegate_to: localhost
  #         run_once: true

  #       - name: clean/dns/clouddns | Get DNS entries
  #         gcp_dns_resource_record_set_info:
  #           auth_kind: serviceaccount
  #           managed_zone:
  #             name: "{{r__gcp_dns_managed_zone_info.resources.0.name}}"
  #             dnsName: "{{r__gcp_dns_managed_zone_info.resources.0.dnsName}}"
  #           project: "{{cluster_vars[buildenv].vpc_network_project}}"
  #           service_account_file: "{{gcp_credentials_file}}"
  #         register: r__gcp_dns_resource_record_set_info

  #       - name: clean/dns/clouddns | Delete A records
  #         gcp_dns_resource_record_set:
  #           auth_kind: serviceaccount
  #           managed_zone:
  #             name: "{{r__gcp_dns_managed_zone_info.resources.0.name}}"
  #             dnsName: "{{r__gcp_dns_managed_zone_info.resources.0.dnsName}}"
  #           name: "{{ item.1.name }}"
  #           project: "{{cluster_vars.project_id}}"
  #           service_account_file: "{{gcp_credentials_file}}"
  #           state: absent
  #           target: "{{ item.1.rrdatas }}"
  #           type: A
  #         with_nested:
  #           - "{{ hosts_to_clean }}"
  #           - "{{ r__gcp_dns_resource_record_set_info.resources | json_query(\"[?type=='A']\") }}"
  #         when: item.0.name == (item.1.name | regex_replace('^(.*?)\\..*$', '\\1'))

  #       - name: clean/dns/clouddns | Delete CNAME records
  #         gcp_dns_resource_record_set:
  #           auth_kind: serviceaccount
  #           managed_zone:
  #             name: "{{r__gcp_dns_managed_zone_info.resources.0.name}}"
  #             dnsName: "{{r__gcp_dns_managed_zone_info.resources.0.dnsName}}"
  #           name: "{{ item.1.name }}"
  #           project: "{{cluster_vars.project_id}}"
  #           service_account_file: "{{gcp_credentials_file}}"
  #           state: absent
  #           target: "{{ item.1.rrdatas[0] }}"
  #           type: CNAME
  #         with_nested:
  #           - "{{ hosts_to_clean }}"
  #           - "{{ r__gcp_dns_resource_record_set_info.resources | json_query(\"[?type=='CNAME']\") }}"
  #         when: ((item.0.name |regex_replace('-(?!.*-).*')) == (item.1.name | regex_replace('^(.*?)\\..*$', '\\1')))  and  (item.0.name == item.1.rrdatas[0] | regex_replace('^(.*?)\\..*$', '\\1'))
  #     when: cluster_vars.dns_server=="clouddns"
  # when: hosts_to_clean | length