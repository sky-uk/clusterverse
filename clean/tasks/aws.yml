---

- name: Delete EC2 instances
  block:
    - name: Get existing AWS instance info
      ec2_instance_info:
        filters:
          "tag:cluster_name": "{{cluster_name}}"
          "instance-state-name": ["running", "stopped"]
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
      register: r__ec2_instance_info
      delegate_to: localhost
      run_once: true

    - set_fact:
        instances_to_del: "{{r__ec2_instance_info.instances | json_query(\"[?tags.operational_state == '\"+clean+\"']\") }}"
      when: clean != '_all_'
    - set_fact:
        instances_to_del: "{{r__ec2_instance_info.instances}}"
      when: clean == '_all_'

    - name: Remove EC2 instances termination protection
      ec2:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{ cluster_vars.region }}"
        state: "{{ item.state.name }}"
        termination_protection: "no"
        instance_ids: "{{ item.instance_id }}"
      with_items: "{{ instances_to_del }}"

    - name: Delete EC2 instances
      ec2:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{ cluster_vars.region }}"
        state: "absent"
        instance_ids: "{{ instances_to_del | json_query(\"[].instance_id\") }}"
        wait: true
      when: instances_to_del|length > 0


- name: Delete security group
  ec2_group:
    name: "{{ cluster_name }}-sg"
    region: "{{cluster_vars.region}}"
    vpc_id: "{{vpc_id}}"
    aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
    aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
    state: absent
  when: clean == '_all_'
