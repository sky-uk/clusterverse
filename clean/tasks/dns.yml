---

- name: Delete DNS entries from route53
  block:
    - name: Delete DNS A records using nsupdate (if applicable)
      nsupdate:
        key_name: "{{bind9[buildenv].key_name}}"
        key_secret: "{{bind9[buildenv].key_secret}}"
        server: "{{bind9[buildenv].server}}"
        zone: "{{dns_tld_external}}"
        state: "absent"
        record: "{{item}}.{{cluster_vars.dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
      with_items: "{{ hosts_to_clean }}"

    - name: "Delete CNAME records"
      nsupdate:
        key_name: "{{bind9[buildenv].key_name}}"
        key_secret: "{{bind9[buildenv].key_secret}}"
        server: "{{bind9[buildenv].server}}"
        zone: "{{dns_tld_external}}"
        record: "{{item | regex_replace('-(?!.*-).*')}}.{{cluster_vars.dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
        value:  "{{item}}.{{cluster_vars.dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
        type: CNAME
        state: absent
      with_items: "{{ hosts_to_clean }}"
      when: instance_to_create is undefined or rescuing_instance is undefined
  when: cluster_vars.dns_server == "nsupdate"

- name: Delete DNS entries from route53
  block:
    - name: Get A records from route53
      route53:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        state: "get"
        zone: "{{cluster_vars.dns_zone_external}}"
        record: "{{item}}.{{cluster_vars.dns_zone_external}}"
        type: "A"
        private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
      register: dns_rec
      with_items: "{{ hosts_to_clean }}"

    - name: Remove A records from route53
      route53:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        state: "absent"
        zone: "{{ item.set.zone }}"
        record: "{{ item.set.record }}"
        type: "{{ item.set.type }}"
        ttl: "{{ item.set.ttl }}"
        value: ["{{ item.set.value }}"]
        private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
      with_items: "{{ dns_rec.results }}"
      when: item.set.value is defined

    - name: Get CNAME records from route53
      route53:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        state: "get"
        zone: "{{cluster_vars.dns_zone_external}}"
        record: "{{item | regex_replace('-(?!.*-)[0-9]{10}$')}}.{{cluster_vars.dns_zone_external}}"
        type: "CNAME"
        private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
      register: dns_rec
      with_items: "{{ hosts_to_clean }}"

    - name: Remove CNAME records from route53
      route53:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        state: "absent"
        zone: "{{ item.set.zone }}"
        record: "{{ item.set.record }}"
        type: "{{ item.set.type }}"
        ttl: "{{ item.set.ttl }}"
        value: ["{{ item.set.value }}"]
        private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
      with_items: "{{ dns_rec.results }}"
      when: item.set.value is defined
  when: cluster_vars.dns_server == "route53"


- name: Delete DNS entries from clouddns
  block:
    - name: Gather info for a pre-existing GCP Managed Zone and store as dict
      gcp_dns_managed_zone_info:
        auth_kind: serviceaccount
        dns_name: "{{dns_tld_external}}"
        project: "{{cluster_vars.project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
      register: gcp_dns_managed_zone_info

    - name: Get DNS entries from clouddns
      gcp_dns_resource_record_set_info:
        auth_kind: serviceaccount
        managed_zone:
          name: "{{gcp_dns_managed_zone_info.resources.0.name}}"
          dnsName: "{{gcp_dns_managed_zone_info.resources.0.dnsName}}"
        project: "{{cluster_vars.project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
      register: gcp_dns_resource_record_set_info

    - name: Remove A records from clouddns
      gcp_dns_resource_record_set:
        auth_kind: serviceaccount
        managed_zone:
          name: "{{gcp_dns_managed_zone_info.resources.0.name}}"
          dnsName: "{{gcp_dns_managed_zone_info.resources.0.dnsName}}"
        name: "{{ item.name }}"
        project: "{{cluster_vars.project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
        state: absent
        target: "{{ item.rrdatas }}"
        type: A
      with_items: "{{ gcp_dns_resource_record_set_info.resources | json_query(\"[?type=='A']\") }}"
      when: (item.name | regex_replace('^(.*?)\\..*$', '\\1')) in hosts_to_clean

    - name: Remove CNAME records from clouddns
      gcp_dns_resource_record_set:
        auth_kind: serviceaccount
        managed_zone:
          name: "{{gcp_dns_managed_zone_info.resources.0.name}}"
          dnsName: "{{gcp_dns_managed_zone_info.resources.0.dnsName}}"
        name: "{{ item.name }}"
        project: "{{cluster_vars.project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
        state: absent
        target: "{{ item.rrdatas }}"
        type: CNAME
      with_items: "{{ gcp_dns_resource_record_set_info.resources | json_query(\"[?type=='CNAME']\") }}"
      vars:
        cnames_to_clean: "{{ hosts_to_clean | map('regex_replace', '-(?!.*-).*') | list }}"
      when: (item.name | regex_replace('^(.*?)\\..*$', '\\1')) in cnames_to_clean
  when: cluster_vars.dns_server=="clouddns"
