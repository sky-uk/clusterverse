---

- name: Remove deletion protection
  command: "gcloud compute instances update {{item.hostname}} --no-deletion-protection --zone {{cluster_vars.region}}-{{item.az_name}}"
  with_items: "{{cluster_hosts_flat}}"
  delegate_to: localhost
  run_once: true
  when: "cluster_vars[buildenv].deletion_protection == 'yes'"

#- name: Remove deletion protection (broken)
#  gcp_compute_instance:
#    name: "{{item.hostname}}"
#    project: "{{cluster_vars.project_id}}"
#    zone: "{{cluster_vars.region}}-{{item.az_name}}"
#    auth_kind: "serviceaccount"
#    service_account_file: "{{gcp_credentials_file}}"
#    deletion_protection: no

- name: Delete GCE VMs asynchronously
  gcp_compute_instance:
    name: "{{item.hostname}}"
    project: "{{cluster_vars.project_id}}"
    zone: "{{cluster_vars.region}}-{{item.az_name}}"
    auth_kind: "serviceaccount"
    service_account_file: "{{gcp_credentials_file}}"
    state: "absent"
  register: gcp_compute_instance
  with_items: "{{cluster_hosts_flat}}"
  async: 7200
  poll: 0

- name: Wait for gce instance deletion to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: gcp_jobs
  until: gcp_jobs.finished
  retries: 300
  with_items: "{{gcp_compute_instance.results}}"

- name: Delete GCP cluster firewalls
  gcp_compute_firewall:
    name: "{{ item.name }}"
    state: "absent"
    auth_kind: "serviceaccount"
    service_account_file: "{{gcp_credentials_file}}"
    project: "{{cluster_vars.project_id}}"
  with_items: "{{ cluster_vars.firewall_rules }}"

- name: Delete the GCP network (if -e create_gce_network=true)
  gcp_compute_network:
    name: "{{cluster_vars[buildenv].vpc_network_name}}"
    auth_kind: "serviceaccount"
    service_account_file: "{{gcp_credentials_file}}"
    project: "{{cluster_vars.project_id}}"
    state: absent
  when: create_gce_network is defined and create_gce_network|bool

- name: Delete DNS entries from clouddns
  block:
  - name: Gather info for a pre-existing GCP Managed Zone and store as dict
    gcp_dns_managed_zone_info:
      auth_kind: serviceaccount
      dns_name: "{{dns_tld_external}}"
      project: "{{cluster_vars.project_id}}"
      service_account_file: "{{gcp_credentials_file}}"
    register: gcp_dns_managed_zone_info
    become: false
    delegate_to: localhost
    run_once: true
    when: (cluster_vars.dns_server is defined and cluster_vars.dns_server != "") and cluster_vars.dns_server=="clouddns" and (cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != "")
  
  - name: Get DNS entries from clouddns
    gcp_dns_resource_record_set_info:
      auth_kind: serviceaccount
      managed_zone:
        name: "{{gcp_dns_managed_zone_info.resources.0.name}}"
        dnsName: "{{gcp_dns_managed_zone_info.resources.0.dnsName}}"
      project: "{{cluster_vars.project_id}}"
      service_account_file: "{{gcp_credentials_file}}"
    register: gcp_dns_resource_record_set_info
    with_items: "{{ cluster_hosts_flat }}"
    when: (cluster_vars.dns_server is defined and cluster_vars.dns_server != "") and cluster_vars.dns_server=="clouddns" and (cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != "")
  
  - name: Remove related clusterverse A records from clouddns only
    gcp_dns_resource_record_set:
      auth_kind: serviceaccount
      managed_zone:
        name: "{{gcp_dns_managed_zone_info.resources.0.name}}"
        dnsName: "{{gcp_dns_managed_zone_info.resources.0.dnsName}}"
      name: "{{ item.name }}" 
      project: "{{cluster_vars.project_id}}"
      service_account_file: "{{gcp_credentials_file}}"
      state: absent    
      target: "{{ item.rrdatas[0] }}" 
      type: A
      ttl: "{{ item.ttl }}" 
    become: false
    delegate_to: localhost
    run_once: true
    with_items: "{{ gcp_dns_resource_record_set_info.results.0.resources }}"
    when: (cluster_vars.dns_server is defined and cluster_vars.dns_server != "") and cluster_vars.dns_server=="clouddns" and (cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != "")

  - name: Remove related clusterverse CNAME records from clouddns only
    gcp_dns_resource_record_set:
      auth_kind: serviceaccount
      managed_zone:
        name: "{{gcp_dns_managed_zone_info.resources.0.name}}"
        dnsName: "{{gcp_dns_managed_zone_info.resources.0.dnsName}}"
      name: "{{ item.name }}"
      project: "{{cluster_vars.project_id}}"
      service_account_file: "{{gcp_credentials_file}}"
      state: absent    
      target: "{{ item.rrdatas[0] }}" 
      type: CNAME
      ttl: "{{ item.ttl }}"
    become: false
    delegate_to: localhost
    run_once: true
    with_items: "{{ gcp_dns_resource_record_set_info.results.0.resources }}"
    when: (cluster_vars.dns_server is defined and cluster_vars.dns_server != "") and cluster_vars.dns_server=="clouddns" and (cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != "")
