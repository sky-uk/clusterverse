---

- name: Load cluster definitions
  block:
    - block:
        - name: Derive cluster definitions by merging tiered configuration files
          merge_vars:
            from: "{{ merge_dict_vars_list }}"
            ignore_missing_files: True

#        - name: Loaded/derived/overridden cluster_vars
#          debug: msg="{{cluster_vars}}"
      when: merge_dict_vars_list is defined and merge_dict_vars_list | length > 0

    - block:
        - name: Load native cluster definitions by forcing include of group_vars on localhost (no inventory yet, so cannot import automatically)
          include_vars: { dir: "{{ playbook_dir }}/group_vars/{{ clusterid }}" }

        - deprecate_str: { msg: "Loading variables via group_vars/clusterid is deprecated.  Please use merge_vars via cluster_defs in future" }
      when: merge_dict_vars_list is not defined


    - name: Combine command-line cluster_vars_override into the loaded cluster_vars
      set_fact:
        cluster_vars: "{{cluster_vars | combine(_cluster_vars_override_templated, recursive=True)}}"
      vars:
        _cluster_vars_override_templated: "{{cluster_vars_override}}"     #This pre-templating technique is needed because sometimes the command-line parameters are interpolated as a string, sometimes as a dict - this normalises them as a dict (which the 'combine' filter, above, requires).
      when: cluster_vars is defined and cluster_vars_override is defined and cluster_vars_override != ''


- name: Preflight check
  block:
    - assert: { that: "ansible_version.full is version_compare('2.10', '>=')", fail_msg: "ansible-core > 2.10 required for Azure support." }
      when: cluster_vars.type == "azure"

      ## Note cannot use '--format json' in 'ansible-galaxy collection list' command, as it is not present in 2.10.x
    - assert:
        that: "(ansible_version.full is version('2.9.6', '>=') and ansible_version.full is version('2.10.6', '<='))  or  ('community.aws' in galaxy_collections  and  galaxy_collections['community.aws'].version is version('1.5.0', '>='))"
        fail_msg: "If Ansible > 2.9.6 then community.aws > 1.5.0 is required for valid community.aws.route53 support (by default in Ansible v4)."
      vars:
        _galaxy_lookup: "{{ lookup('pipe', 'ansible-galaxy collection list', errors='ignore') }}"
        galaxy_collections: |-
          {% set res = {} -%}
          {%- for sub in (_galaxy_lookup | ternary(_galaxy_lookup, '') | trim).split('\n') | map('trim') | map('regex_replace', '\\s+', ' ') | select | list -%}
            {% set _ = res.update({sub.split(' ')[0]: {'version': sub.split(' ')[1]|default('')}}) -%}
          {%- endfor %}
          {{ res }}

    - assert: { that: "app_name is defined and app_name != ''", fail_msg: "Please define app_name" }
    - assert: { that: "app_class is defined and app_class != ''", fail_msg: "Please define app_class" }
    - assert: { that: "cluster_vars is defined", fail_msg: "Please define cluster_vars" }
    - assert: { that: "clusterid is defined", fail_msg: "Please define clusterid" }
    - assert: { that: "buildenv is defined and cluster_vars[buildenv] is defined", fail_msg: "Please define buildenv" }

      ## Tags/ labels must be compatible with GCP and AWS - check everything that goes into a label.
    - assert: { that: "release_version is regex('^[a-z\\d\\-_]{0,63}$')", fail_msg: "Please ensure release_version ({{release_version}}) is in the set [a-z\\d\\-_], and <63 characters long." }
      when: release_version is defined
    - assert: { that: "cluster_suffix is regex('^[a-z\\d\\-_]{0,63}$')", fail_msg: "Please ensure cluster_suffix ({{cluster_suffix}}) is in the set[a-z\\d\\-_], and <63 characters long." }
      when: cluster_suffix is defined
    - assert: { that: "'{%- for label in cluster_vars.custom_tagslabels -%}{% if not cluster_vars.custom_tagslabels[label] is regex('^[a-z\\d\\-_]{0,63}$') %}{{label}}: {{cluster_vars.custom_tagslabels[label]}}{% endif %}{%- endfor -%}' == ''", fail_msg: "Please ensure all cluster_vars.custom_tagslabels are in the set [a-z\\d\\-_], and <63 characters long." }
      when: "'custom_tagslabels' in cluster_vars"
    - assert: { that: "'{%- for hosttype in cluster_vars[buildenv].hosttype_vars -%}{% if ('version' in cluster_vars[buildenv].hosttype_vars[hosttype]) and (not cluster_vars[buildenv].hosttype_vars[hosttype].version is regex('^[a-z\\d\\-_]{0,63}$')) %}{{cluster_vars[buildenv].hosttype_vars[hosttype].version}}{% endif %}{%- endfor -%}' == ''", fail_msg: "Please ensure cluster_vars[{{buildenv}}].hosttype_vars[hosttype].version is in the set [a-z\\d\\-_], and <63 characters long." }

    - assert: { that: "(cluster_vars.assign_public_ip == 'yes' and cluster_vars.inventory_ip == 'public') or (cluster_vars.inventory_ip == 'private')", fail_msg: "If inventory_ip=='public', 'assign_public_ip' must be 'yes'" }
      when: cluster_vars.type == "gcp" or cluster_vars.type == "aws"

    - assert: { that: "cluster_vars[buildenv] | json_query(\"hosttype_vars.*.auto_volumes[] | [?contains(`/dev/sdb,/dev/sdc,/dev/sdd,/dev/sde`, device_name) && volume_type!='ephemeral']\") | length == 0", fail_msg: "device_names /dev/sd[b-e] are only allowed for ephemeral volumes in AWS cluster_vars[buildenv].hosttype_vars.  Please start non-ephemeral devices at /dev/sdf." }
      when: cluster_vars.type == "aws"

    - assert:
        that: "'{%- for hosttype in cluster_vars[buildenv].hosttype_vars | dict2items -%}{%- if ('lvmparams' not in hosttype.value and (hosttype.value.auto_volumes | length) == (hosttype.value.auto_volumes | map(attribute='mountpoint') | list | unique | count))  or  ('lvmparams' in hosttype.value and (hosttype.value.auto_volumes | selectattr('mountpoint', '!=', '/') | map(attribute='mountpoint') | list | unique | count == 1)) -%}{%- else -%}{{hosttype.key}}{%- endif -%}{%- endfor -%}' == ''"
        fail_msg: "All non-root volume mountpoints must either be all different (in which case 'lvmparams' must not be set), or all the same (in which case, 'lvmparams' must be set)"


- name: Create gcp service account contents file from cluster_vars[buildenv].gcp_service_account_rawtext (unless already defined by user)
  block:
    - name: "set gcp_credentials_file fact"
      set_fact:
        gcp_credentials_file: "gcp__{{ (cluster_vars[buildenv].gcp_service_account_rawtext if cluster_vars[buildenv].gcp_service_account_rawtext|type_debug == 'dict' else cluster_vars[buildenv].gcp_service_account_rawtext | string | from_json).project_id }}.json"
      when: gcp_credentials_file is not defined

    - name: dynamic_inventory | stat the gcp_credentials_file
      stat: path={{gcp_credentials_file}}
      register: r__stat_gcp_credentials_file

    - name: "Copy credentials into gcp_credentials_file as {{gcp_credentials_file}}"
      local_action: copy content={{cluster_vars[buildenv].gcp_service_account_rawtext}} dest={{gcp_credentials_file}}
      when: not r__stat_gcp_credentials_file.stat.exists|default(False)|bool
  when: cluster_vars.type == "gcp"
