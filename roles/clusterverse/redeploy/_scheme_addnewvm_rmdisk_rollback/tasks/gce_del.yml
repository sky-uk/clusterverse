---

- name: Delete GCP instance
  block:
    - name: Get GCP instance facts
      gcp_compute_instance_info:
        zone: "{{cluster_vars.region}}-{{item.az_name}}"
        filters:
          - "name = {{item.hostname | regex_replace('-(?!.*-).*')}}*"
          - "status = TERMINATED"
        project: "{{cluster_vars.project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        scopes: ["https://www.googleapis.com/auth/compute.readonly"]
      with_items: "{{cluster_hosts_flat}}"
      register: gcp_compute_instance_info
      delegate_to: localhost
      run_once: true

    - name: Remove deletion protection
      command: "gcloud compute instances update {{item.name}} --no-deletion-protection --zone {{item.zone | regex_replace('.*/(.*)$', '\\1')}}"
      with_items: "{{gcp_compute_instance_info.results | json_query('[].resources[]')}}"
      delegate_to: localhost
      run_once: true
      when: "cluster_vars[buildenv].deletion_protection == 'yes'"

    - name: Delete GCE VMs asynchronously
      gcp_compute_instance:
        name: "{{item.name}}"
        project: "{{cluster_vars.project_id}}"
        zone: "{{item.zone | regex_replace('.*/(.*)$', '\\1')}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        state: "absent"
      register: gcp_compute_instance
      with_items: "{{gcp_compute_instance_info.results | json_query('[].resources[]')}}"
      async: 7200
      poll: 0

    - name: Wait for gce instance deletion to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: gcp_jobs
      until: gcp_jobs.finished
      retries: 300
      with_items: "{{gcp_compute_instance.results}}"
