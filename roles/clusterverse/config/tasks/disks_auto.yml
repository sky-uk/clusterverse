---
#- debug: msg={{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].auto_volumes }}
#- debug: msg={{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme_volumes }}

- block:
  - name: autodisks | Get block devices as json
    shell: lsblk -Jb
    register: lsblk

  #- debug: msg={{ lsblk.stdout | from_json }}

  - name: autodisks | Retrieve unused (i.e. unmounted, with unmounted child partitions), 'disk' devices (i.e. not cdroms or loopback)
    set_fact:
      lsblk_volumes: "{{ lsblk.stdout | from_json | json_query(\"blockdevices[?type=='disk' && !mountpoint && (!children || length(children[?mountpoint])==`0`)].{dev: name, size_b: size}\") }}"

  #- debug: msg={{ lsblk_volumes }}

  - name: autodisks | Create 'nvmevols' fact that contains a list of available host nvme devices (lsblk) mapped to the mountpoints defined in cluster_vars. Handles single mounting points with LV/VG
    set_fact:
      nvmevols: |
        {% set res = [] -%}
        {% set tmp_blkvols = lsblk_volumes -%}
          {%- for nvmevol in cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme_volumes -%}
            {%- set blkvolloop = namespace(break=false) -%}
            {%- for blkvol in tmp_blkvols if not blkvolloop.break -%}
              {%- if (nvmevol.volume_size*1000000000|int) == (blkvol.size_b|int) -%}
                {%- set _ = res.extend([ {'device': '/dev/'+blkvol.dev, 'mountpoint': nvmevol.mountpoint, 'fstype': nvmevol.fstype}]) -%}
                {%- set _ = tmp_blkvols.remove(blkvol) -%}
                {%- set blkvolloop.break = true -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
        {{ res }}


# The following block mounts all nvme attached volumes that have individual mountpoints
  - debug: msg={{ nvmevols | map(attribute='mountpoint') | list | unique }}

  - name: autodisks | Mount nvme volumes with different mountpoints
    block:
    - name: autodisks | Create filesystem(s) on attached nvme volume(s)
      become: yes
      filesystem:
        fstype: "{{ item.fstype }}"
        dev: "{{ item.device }}"
        force: no
      with_items: "{{ nvmevols }}"

    - name: autodisks | Mount created filesytem(s) persistently
      become: yes
      mount:
        path: "{{ item.mountpoint }}"
        src: "{{ item.device }}"
        fstype: "{{ item.fstype }}"
        state: mounted
        opts: _netdev
      with_items: "{{ nvmevols }}"
    when: (nvmevols | map(attribute='mountpoint') | list | unique | count == nvmevols | map(attribute='mountpoint') | list | count)

  # The following block mounts all nvme attached volumes that have a single, common mountpoint, by creating a logical volume
  - name: autodisks | Mount nvme volumes in a single mountpoint through LV/VG
    block:
    #- debug: msg={{nvmevols | map(attribute='device') | join(',')}}

    - name: autodisks | Create a volume group from all nvme devices
      become: yes
      lvg:
        vg:  "{{ vg_name }}"
        pvs: "{{nvmevols | map(attribute='device') | join(',')}}"

    - name: autodisks | Create a logical volume from volume group
      become: yes
      lvol:
        vg: "{{ vg_name }}"
        lv: "{{ lv_name }}"
        size: "{{ lv_size }}"

    - name: autodisks | Create filesystem(s) on attached nvme volume(s)
      become: yes
      filesystem:
        fstype: "{{ nvmevols | map(attribute='fstype') | list | unique | join('') }}"
        dev: "/dev/{{ vg_name }}/{{ lv_name }}"
        force: no

    - name: autodisks | Mount created filesytem(s) persistently
      become: yes
      mount:
        path: "{{ nvmevols | map(attribute='mountpoint') | list | unique | join('') }}"
        src: "/dev/{{ vg_name }}/{{ lv_name }}"
        fstype: "{{ nvmevols | map(attribute='fstype') | list | unique | join('') }}"
        state: mounted
        opts: _netdev
    when: (nvmevols | map(attribute='mountpoint') | list | unique | count == 1) and (nvmevols | map(attribute='mountpoint') | list | count >= 2) and (nvmevols | map(attribute='fstype') | list | unique | count == 1)

  when: (cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme_volumes is defined) and (cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme_volumes|length > 0) and (cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme_volumes != "[]")

- name: autodisks | Get block devices as json
  shell: lsblk -Jb
  register: lsblk

#- debug: msg={{ lsblk.stdout | from_json }}

- name: autodisks | Retrieve unused (i.e. unmounted, with unmounted child partitions), 'disk' devices (i.e. not cdroms or loopback)
  set_fact:
    lsblk_volumes: "{{ lsblk.stdout | from_json | json_query(\"blockdevices[?type=='disk' && !mountpoint && (!children || length(children[?mountpoint])==`0`)].{dev: name, size_b: size}\") }}"

#- debug: msg={{ lsblk_volumes }}

- name: autodisks | Create 'hostvols' fact that contains a list of available host devices (lsblk) mapped to the mountpoints defined in cluster_vars.  Allow for multiple disks with same size.
  set_fact:
    hostvols: |
      {% set res = [] -%}
      {% set tmp_blkvols = lsblk_volumes -%}
        {%- for autovol in cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].auto_volumes -%}
          {%- set blkvolloop = namespace(break=false) -%}
          {%- for blkvol in tmp_blkvols if not blkvolloop.break -%}
            {%- if (autovol.volume_size*1073741824|int) == (blkvol.size_b|int) -%}
              {%- set _ = res.extend([ {'device': '/dev/'+blkvol.dev, 'mountpoint': autovol.mountpoint, 'fstype': autovol.fstype}]) -%}
              {%- set _ = tmp_blkvols.remove(blkvol) -%}
              {%- set blkvolloop.break = true -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      {{ res }}

#- debug: msg={{hostvols}}

# Create partition-less filesystems.
- name: autodisks | Create filesystem(s) on attached volume(s)
  become: yes
  filesystem:
    fstype: "{{ item.fstype }}"
    dev: "{{ item.device }}"
    force: no
  with_items: "{{ hostvols }}"
  register: created_filesystem

- name: autodisks | Mount created filesytem(s) persistently
  become: yes
  mount:
    path: "{{ item.mountpoint }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    state: mounted
    opts: _netdev
  with_items: "{{ hostvols }}"

# debconf Ansible module cannot be used as it has a bug: https://github.com/ansible/ansible/issues/29352
- name: autodisks | Reconfigure rsyslog if any volume has been attached
  become: yes
  shell: "dpkg-reconfigure rsyslog"
  when: created_filesystem.changed
