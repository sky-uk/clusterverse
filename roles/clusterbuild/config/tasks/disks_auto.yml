---

- name: autodisks | Get block devices as json
  shell: lsblk -Jb
  register: lsblk

- debug: msg={{ lsblk.stdout | from_json }}

- name: autodisks | Retrieve unused (i.e. unmounted, with no child partitions), 'disk' devices (i.e. not cdroms or loopback)
  set_fact:
    lsblk_volumes: "{{ lsblk.stdout | from_json | json_query(\"blockdevices[?type=='disk' && !children && !mountpoint].{dev: name, size_b: size}\") }}"

- debug: msg={{ lsblk_volumes }}
- debug: msg={{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].auto_volumes }}

- name: autodisks | Create 'hostvols' fact that contains a list of available host devices (lsblk) mapped to the mountpoints defined in cluster_vars.  Allow for multiple disks with same size.
  set_fact:
    hostvols: |
      {% set res = [] -%}
      {% set tmp_blkvols = lsblk_volumes -%}
        {%- for autovol in cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].auto_volumes -%}
          {%- set blkvolloop = namespace(break=false) -%}
          {%- for blkvol in tmp_blkvols if not blkvolloop.break -%}
            {%- if (autovol.volume_size*1073741824|int) == (blkvol.size_b|int) -%}
              {%- set _ = res.extend([ {'device': '/dev/'+blkvol.dev, 'mountpoint': autovol.mountpoint, 'fstype': autovol.fstype}]) -%}
              {%- set _ = tmp_blkvols.remove(blkvol) -%}
              {%- set blkvolloop.break = true -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      {{ res }}

- debug: msg={{hostvols}}

# Create partition-less filesystems.
- name: autodisks | Create filesystem(s) on attached volume(s)
  become: yes
  filesystem:
    fstype: "{{ item.fstype }}"
    dev: "{{ item.device }}"
    force: no
  with_items: "{{ hostvols }}"

- name: autodisks | Mount created filesytem(s) persistently
  become: yes
  mount:
    path: "{{ item.mountpoint }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    state: mounted
    opts: _netdev
  with_items: "{{ hostvols }}"
