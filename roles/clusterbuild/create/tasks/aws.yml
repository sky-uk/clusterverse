---

- name: Create AWS security group
  ec2_group:
    name: "{{ cluster_name }}-sg"
    description: "{{ cluster_name }} rules"
    region: "{{cluster_vars[clusterid].region}}"
    vpc_id: "{{vpc_id}}"
    aws_access_key: "{{cluster_vars[clusterid][buildenv].aws_access_key}}"
    aws_secret_key: "{{cluster_vars[clusterid][buildenv].aws_secret_key}}"
    tags:
      Name: "{{ cluster_name }}-sg"
      env: "{{ buildenv }}"
    rules: "{{ cluster_vars[clusterid][buildenv].secgroup_new }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: new_aws_sg

- name: Create EC2 instances
  block:
    - name: Create EC2 instances
      ec2:
        aws_access_key: "{{cluster_vars[clusterid][buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[clusterid][buildenv].aws_secret_key}}"
        region: "{{cluster_vars[clusterid].region}}"
        key_name: "{{cluster_vars[clusterid][buildenv].key_name}}"
        instance_type: "{{item.flavor}}"
        image: "{{cluster_vars[clusterid].image}}"
        vpc_subnet_id: "{{item.vpc_subnet_id}}"
        assign_public_ip: "{{cluster_vars[clusterid].assign_public_ip}}"
        group: "{{cluster_vars[clusterid][buildenv].secgroups_existing + [new_aws_sg.group_name]}}"
        wait: yes
        instance_tags: '{"Name":"{{item.hostname}}", "type":"{{item.type}}", "env":"{{buildenv}}", "maintenance_mode":"{{maintenance_mode_on_creation}}"}'
        termination_protection: "{{cluster_vars[clusterid][buildenv].termination_protection}}"
        volumes: "{{cluster_vars[clusterid][buildenv].host_vars[item.type].ephemeral_volumes | default([])}}"
        count_tag:
            Name: "{{item.hostname}}"
        exact_count: 1
      with_items: "{{cluster_hosts_flat}}"
      async: 7200
      poll: 0
      register: aws_instances

    - name: Wait for aws instance creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: aws_jobs
      until: aws_jobs.finished
      retries: 300
      with_items: "{{aws_instances.results}}"

    - debug: msg={{aws_jobs.results}}

    - name: Extract EBS volume data so we can tag the disks
      set_fact:
        ebsdata: |
          {% set res = [] -%}
          {%- for host in aws_jobs.results -%}
            {%- for devkey in host.tagged_instances[0].block_device_mapping.keys()-%}
            {% set _dummy = res.extend([{
              'hostname': host.tagged_instances[0].tags.Name,
              'ec2_id': host.tagged_instances[0].id,
              'device_name': devkey.encode("utf-8"),
              'volume_id': host.tagged_instances[0].block_device_mapping[devkey.encode("utf-8")].volume_id
              }]) -%}
            {%- endfor %}
          {%- endfor %}
          {{ res }}

    - debug: msg={{ebsdata}}

    - name: set the ec2 volume name tag
      ec2_tag:
        aws_access_key: "{{cluster_vars[clusterid][buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[clusterid][buildenv].aws_secret_key}}"
        region: "{{cluster_vars[clusterid].region}}"
        resource: "{{item.volume_id}}"
        tags:
          Name: "{{ item.hostname }}--{{item.device_name | regex_replace('^.*\\/(.*)', '\\1')}}"
      with_items: "{{ebsdata}}"


    - set_fact:
        dynamic_inventory_flat: "{{ _dynamic_inventory_flat }}"
        dynamic_inventory_dict: "{{ _dynamic_inventory_flat | dict_agg('type') }}"
      vars:
        _dynamic_inventory_flat: "{{ aws_jobs.results | json_query('[*].{type: tagged_instances[0].tags.type, hostname: tagged_instances[0].tags.Name, private_ip: tagged_instances[0].private_ip, inventory_ip: tagged_instances[0].private_ip}') }}"

#    - debug: msg={{dynamic_inventory_flat}}
#    - debug: msg={{dynamic_inventory_dict}}
