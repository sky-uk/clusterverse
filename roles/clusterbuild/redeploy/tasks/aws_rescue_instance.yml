---

- debug: msg="Attempting to rollback {{host_to_rollback}}"

- name: Rescuing EC2 instance
  block:
    - name: aws_restore | get existing instance
      ec2_instance_facts:
        filters:
          "instance-state-name": ["running", "stopped"]
        aws_access_key: "{{cluster_vars[clusterid][buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[clusterid][buildenv].aws_secret_key}}"
        region: "{{cluster_vars[clusterid].region}}"
      register: existing_torestore
      delegate_to: localhost
      run_once: true

    - name: aws_restore | Start EC2 instance
      ec2:
        aws_access_key: "{{cluster_vars[clusterid][buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[clusterid][buildenv].aws_secret_key}}"
        region: "{{ cluster_vars[clusterid].region }}"
        state: "running"
        instance_ids: ["{{ existing_torestore | json_query('instances[?tags.Name==`'+ host_to_rollback +'`].instance_id | [0]') }}"]
        wait: true
      delegate_to: localhost
      run_once: true

- name: "set argument variables for {{mainclusteryml}}"
  set_fact:
    maincluster_yml_args: "{{ (argv | join(' ')) | regex_replace('redeploy.yml', mainclusteryml) }}"

- name: Attempt redeploy
  block:
    - set_fact:
        j_rollback_arg: "[?starts_with(@, '{{host_to_rollback_clean|string}}')] | [0]"
      vars:
        host_to_rollback_clean: "{{host_to_rollback | regex_replace('-(?!.*-).*')}}"  

    - set_fact:
        host_to_redeploy: "{'hostname': \"{{rollback_instances | json_query('instances[*].tags.Name') | difference([host_to_rollback]) | to_json | from_json | json_query(j_rollback_arg)}}\"}"
 
    - set_fact:
        host_to_redeploy_release: "{{rollback_instances| json_query('instances[?tags.Name==`' + host_to_redeploy.hostname + '`].tags.release|[0]')}}"

    - name: "run {{mainclusteryml}}"
      shell: "{{maincluster_yml_args}} -e rescuing=true -e rescuing_instance={{ host_to_redeploy.hostname }}"      
      register: r_mainclusteryml

    - name: "Create CNAME record"
      nsupdate:
        key_name: "{{bind9[buildenv].key_name}}"
        key_secret: "{{bind9[buildenv].key_secret}}"
        server: "{{bind9[buildenv].server}}"
        zone: "{{dns_tld_external}}"
        record: "{{host_to_rollback | regex_replace('-(?!.*-).*')}}.{{cluster_vars[clusterid].dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
        value:  "{{host_to_rollback}}.{{cluster_vars[clusterid].dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
        type: CNAME
        state: present
        ttl: 30
      when: cluster_vars[clusterid].dns_server == "nsupdate"

    - name: run pre-delete role
      include_role:
        name: "{{predeleterole}}"
      when: predeleterole is defined and predeleterole != ""    
        
    - include_tasks: aws_stop_instance.yml
      when: cluster_vars[clusterid].type == "aws"
      vars:
        host_to_stop: "{{host_to_redeploy}}"
        release_to_stop: "{{host_to_redeploy_release}}"
        deploy_status_to_stop: "new"
