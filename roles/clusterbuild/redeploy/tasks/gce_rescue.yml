---


- debug: msg="Rescuing"

- name: gce_restore | Get GCP instance facts
  gcp_compute_instance_facts:
    zone: "{{cluster_vars[clusterid].region}}-{{item.az_name}}"
    filters:
      - "name = {{item.hostname | regex_replace('-(?!.*-).*')}}*"
    project: "{{cluster_vars[clusterid].project_id}}"
    auth_kind: "serviceaccount"
    service_account_file: "{{gcp_credentials_file}}"
    scopes: ["https://www.googleapis.com/auth/compute.readonly"]
  with_items: "{{cluster_hosts_flat}}"
  register: rollback_instances
  delegate_to: localhost
  run_once: true

- name: gce_restore | set hosts_to_rollback_stopped
  set_fact: hosts_to_rollback_stopped={{rollback_instances | json_query('results[].items[?labels.deploy_status == `old` && status==`TERMINATED`].name  | []') | list | sort(reverse=True)}}

- name: gce_restore | set expected nodes
  set_fact:
    remove_first: "{{hosts_running|int - current_cluter_size|int}}"
  vars:  
    hosts_running: "{{rollback_instances | json_query('results[].items[?status==`RUNNING`].name | []') | length}}"  

- name: gce_restore | remove spare instance (if exixsts)
  block:

    - set_fact:
        host_to_redeploy: "{'hostname': \"{{host_to_redeploy_hostname}}\"}"
      vars:
        host_to_redeploy_hostname: "{{rollback_instances | json_query('results[].items[?labels.deploy_status == `new` && status==`RUNNING`].name | []') | list | sort(reverse=True) | first}}"    

    - set_fact:
        j_recover_arg: "[?starts_with(@, '{{host_to_redeploy.hostname | regex_replace('-(?!.*-).*')}}')] | [0]"

    - set_fact:
        host_to_recover: "{{rollback_instances | json_query('results[*].items[].name') | difference([host_to_redeploy.hostname])| to_json | from_json | json_query(j_recover_arg)}}"

    - name: Replace CNAME
      nsupdate:
        key_name: "{{bind9.key_name}}"
        key_secret: "{{bind9.key_secret}}"
        server: "{{bind9.server}}"
        zone: "{{dns_tld_external}}"
        record: "{{host_to_redeploy.hostname | regex_replace('-(?!.*-).*')}}.{{cluster_vars[clusterid].dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
        value:  "{{ host_to_recover}}.{{cluster_vars[clusterid].dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"  
        type: CNAME
        state: present
        ttl: 30
      when: cluster_vars[clusterid].dns_server == "nsupdate"

    - name: run pre-delete role
      include_role:
        name: "{{predeleterole}}"
      when: predeleterole is defined and predeleterole != ""    
        
    - include_tasks: aws_stop_instance.yml
      when: cluster_vars[clusterid].type == "aws"
      vars:
        host_to_stop: "{{host_to_redeploy}}"
        deploy_status_to_stop: "new"

    - include_tasks: gce_stop_instance.yml
      when: cluster_vars[clusterid].type == "gce"
      vars:
        host_to_stop: "{{host_to_redeploy}}"
        deploy_status_to_stop: "new" 
  when: remove_first|int == 1

- name: re-add instances
  include_tasks: gce_rescue_instance.yml
  with_items: "{{ hosts_to_rollback_stopped }}"
  loop_control:
    loop_var: host_to_rollback
  when: hosts_to_rollback_stopped | length>0 and cluster_vars[clusterid].type == "gce"
