---
# Dynamically look up VPC ID by name from aws
- name: Looking up VPC facts to extract ID
  ec2_vpc_net_facts:
    region:         "{{ cluster_vars[clusterid].region }}"
    aws_access_key: "{{ cluster_vars[clusterid][buildenv].aws_access_key }}"
    aws_secret_key: "{{ cluster_vars[clusterid][buildenv].aws_secret_key }}"
    filters:
      "tag:Name": "{{ cluster_vars[clusterid][buildenv].vpc_name }}"
  register: vpcdata
  delegate_to: localhost
  run_once: true

- name: Set VPC ID in variable
  set_fact:
    vpc_id: "{{ vpcdata.vpcs[0].id }}"

#- debug: msg={{cluster_vars[clusterid][buildenv].host_vars | json_query('*.[az]|[]|[]') | unique}}

- name: Looking up proxy Subnet facts
  ec2_vpc_subnet_facts:
    region:         "{{ cluster_vars[clusterid].region }}"
    aws_access_key: "{{ cluster_vars[clusterid][buildenv].aws_access_key }}"
    aws_secret_key: "{{ cluster_vars[clusterid][buildenv].aws_secret_key }}"
    filters:
      "tag:Name": "{{ cluster_vars[clusterid][buildenv].vpc_subnet_name_prefix }}-{{ cluster_vars[clusterid].region }}{{item}}"
      vpc-id:     "{{ vpc_id }}"
  register: subnetdata
  with_items: "{{cluster_vars[clusterid][buildenv].host_vars | json_query('*.[az]|[]|[]') | unique}}"
  delegate_to: localhost
  run_once: true

- set_fact:
    subnet_ids_per_az: "{{subnetdata.results | json_query('[*].{az_name: item, subnet_id: subnets[0].id, subnet_name: subnets[0].tags.Name, vpc_id: subnets[0].vpc_id}') | dict_agg('az_name')}}"

- name: Update cluster_hosts_flat with subnet_ids
  set_fact:
    cluster_hosts_flat: |
      {% set res = cluster_hosts_flat -%}
      {%- for host in res -%}
        {%- set _dummy = host.update({'vpc_subnet_id': subnet_ids_per_az[host.az_name][0].subnet_id | string}) -%}
      {%- endfor %}
      {{ res }}
