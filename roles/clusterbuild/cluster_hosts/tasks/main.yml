---

# Create an array of dictionaries containing all the hostnames PER-AZ (i.e. couchbase-dev-node-a0, couchbase-dev-master-a1, couchbase-dev-master-b0, couchbase-dev-master-b1 etc) to be created:
- set_fact:
    cluster_hosts_flat: |
      {% set res = [] -%}
      {%- for hostttype in cluster_vars[clusterid][buildenv].hosttype_vars.keys() -%}
        {%- for azname in cluster_vars[clusterid][buildenv].hosttype_vars[hostttype].az -%}
          {%- for number in range(0,cluster_vars[clusterid][buildenv].hosttype_vars[hostttype].count_per_az|int) -%}
            {% set _dummy = res.extend([{
              'hosttype': hostttype,
              'hostname': cluster_name + '-' + hostttype + '-' + azname + number|string,
              'az_name': azname|string,
              'flavor': cluster_vars[clusterid][buildenv].hosttype_vars[hostttype].flavor,
              'release': release_version
              }]) -%}
          {%- endfor %}
        {%- endfor %}
      {%- endfor %}
      {{ res }}

#- debug: msg={{cluster_hosts_flat}}

- name: get other hosts
  set_fact:
    other_hosts: "{{ (hostvars[ansible_play_hosts[0]].cluster_hosts_flat | json_query('[].hostname') + ['localhost']) | unique | symmetric_difference(ansible_play_hosts) }}"
  run_once: true

#- name: other_hosts
#  debug: msg={{other_hosts}}
#  run_once: true

- name: set the cluster_hosts_flat variable on all other hosts
  set_fact:
    cluster_hosts_flat: "{{hostvars[ansible_play_hosts[0]].cluster_hosts_flat}}"
    cacheable: true
  delegate_to: "{{item}}"
  delegate_facts: True
  run_once: true
  with_items: "{{ other_hosts }}"

- include_tasks: aws.yml
  when: cluster_vars[clusterid].type == "aws"

- include_tasks: openstack.yml
  when: cluster_vars[clusterid].type == "openstack"

- include_tasks: gce.yml
  when: cluster_vars[clusterid].type == "gce"

#- debug: msg={{cluster_hosts_flat}}
