---
# Dynamically look up VPC ID by name from aws
- name: Looking up VPC facts to extract ID
  ec2_vpc_net_facts:
    region:         "{{ cluster_vars.region }}"
    aws_access_key: "{{ cluster_vars[buildenv].aws_access_key }}"
    aws_secret_key: "{{ cluster_vars[buildenv].aws_secret_key }}"
    filters:
      "tag:Name": "{{ cluster_vars[buildenv].vpc_name }}"
  register: vpcdata
  delegate_to: localhost
  run_once: true

- name: Set VPC ID in variable
  set_fact:
    vpc_id: "{{ vpcdata.vpcs[0].id }}"

- name: Looking up proxy Subnet facts
  ec2_vpc_subnet_facts:
    region:         "{{ cluster_vars.region }}"
    aws_access_key: "{{ cluster_vars[buildenv].aws_access_key }}"
    aws_secret_key: "{{ cluster_vars[buildenv].aws_secret_key }}"
    filters:
      "tag:Name": "{{ cluster_vars[buildenv].vpc_subnet_name_prefix }}{{item}}"
      vpc-id:     "{{ vpc_id }}"
  register: subnetdata
  with_items: "{{ cluster_vars[buildenv].hosttype_vars | json_query(\"*[vms_by_az][][keys(@)][][]\") | unique }}"
  delegate_to: localhost
  run_once: true

- set_fact:
    subnet_ids_per_az: "{{subnetdata.results | json_query('[*].{az_name: item, subnet_id: subnets[0].id, subnet_name: subnets[0].tags.Name, vpc_id: subnets[0].vpc_id}') | dict_agg('az_name')}}"

- name: Add instance_to_create to cluster_hosts_flat
  set_fact:
    cluster_hosts_flat: |
      {% set res = cluster_hosts_flat -%}
            {%- set _dummy = res.extend([{
              'hosttype': cluster_hosts_flat | json_query('[? hostname == `' + instance_to_create_clean + '`].hosttype|[0]'),
              'hostname': instance_to_create,
              'az_name': cluster_hosts_flat | json_query('[? hostname == `' + instance_to_create_clean + '`].az_name|[0]'),
              'flavor': cluster_hosts_flat | json_query('[? hostname == `' + instance_to_create_clean + '`].flavor|[0]'),
              'release': release_version
              }]) -%}
      {{ res }}
  vars:
     instance_to_create_clean: "{{instance_to_create | regex_replace('-(?!.*-).*')}}"
  when: instance_to_create is defined and cluster_hosts_flat | json_query('[? hostname == `' + instance_to_create + '`]') | length == 0

- name: Add rescuing_instance to cluster_hosts_flat
  set_fact:
    cluster_hosts_flat: |
      {% set res = cluster_hosts_flat -%}
            {%- set _dummy = res.extend([{
              'hosttype': cluster_hosts_flat | json_query('[? hostname == `' + rescuing_instance_clean + '`].hosttype|[0]'),
              'hostname': rescuing_instance,
              'az_name': cluster_hosts_flat | json_query('[? hostname == `' + rescuing_instance_clean + '`].az_name|[0]'),
              'flavor': cluster_hosts_flat | json_query('[? hostname == `' + rescuing_instance_clean + '`].flavor|[0]'),
              'release': release_version
              }]) -%}
      {{ res }}
  vars:
     rescuing_instance_clean: "{{rescuing_instance | regex_replace('-(?!.*-).*')}}"
  when: rescuing_instance is defined and cluster_hosts_flat | json_query('[? hostname == `' + rescuing_instance + '`]') | length == 0

- name: Update cluster_hosts_flat with subnet_ids
  set_fact:
    cluster_hosts_flat: |
      {% set res = cluster_hosts_flat -%}
      {%- for host in res -%}
        {%- set _dummy = host.update({'vpc_subnet_id': subnet_ids_per_az[host.az_name][0].subnet_id | string}) -%}
      {%- endfor %}
      {{ res }}

- name: get existing instance facts
  ec2_instance_facts:
    filters:
      "tag:cluster_name": "{{cluster_name}}"
      "instance-state-name": ["running"]
    aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
    aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
    region: "{{cluster_vars.region}}"
  register: ec2_existing
  delegate_to: localhost

- set_fact:
    running_instance_fact: "{{ec2_existing.instances | json_query('[*].{name: tags.Name, deploy_status: tags.deploy_status}')}}"
    current_cluter_size: "{{ec2_existing.instances | length}}"

- name: Update cluster_hosts_flat with running_instance_fact data
  set_fact:
    cluster_hosts_flat: |
      {% set res = cluster_hosts_flat -%}
      {%- for host in res -%}
        {%- if running_instance_fact[0] is defined -%}
          {%- for real_hostname in running_instance_fact -%}
            {%- if real_hostname.name == host.hostname-%}
              {%- set _dummy = host.update({'hostname': host.hostname})-%}
            {%- elif host.hostname in real_hostname.name -%}
              {%- if(instance_to_create is defined and instance_to_create ==  real_hostname.name) or (rescuing_instance is defined and rescuing_instance ==  real_hostname.name)-%}
              {%- else -%}
                {%- set _dummy = host.update({'hostname': real_hostname.name})-%}
              {% endif -%}
            {% endif -%}
          {%- endfor -%}
        {%- else -%}
          {%- set _dummy = host.update({'hostname': host.hostname + '-' + epoch_time|string})-%}
        {%- endif -%}
        {%- if host.hostname | regex_search('-([0-9]{10})$') | bool != false -%}
          {%- set _dummy = host.update({'hostname': host.hostname + '-' + epoch_time|string})-%}
        {%- endif -%}
      {%- endfor -%}
      {{ res }}

- name: set deploy_status tag
  ec2_tag:
    aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
    aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
    region: "{{cluster_vars.region}}"
    resource: "{{ item }}"
    tags:
      release: "{%- if release_tag !='' -%}{{release_tag}}{%- else -%}unknown{%- endif -%}"
      deploy_status: "{%- if instance_to_create is undefined and rescuing is undefined -%}old{%- else -%}{{deploy_status_tag}}{%- endif -%}"
  delegate_to: localhost
  run_once: true
  vars:
    release_tag: "{{ ec2_existing | json_query(\"instances[?instance_id==`\" + item + \"`].tags.release | [0]\") }}"
    deploy_status_tag: "{{ ec2_existing | json_query(\"instances[?instance_id==`\" + item + \"`].tags.deploy_status | [0]\") }}"
  register: ec2_updated
  with_items: "{{ ec2_existing | json_query('instances[].instance_id')}}"

- set_fact:
    current_release_per_instance: "{{ec2_updated | json_query(\"results[].{value: tags.release, key: tags.Name}\") | items2dict}}"
    current_deploy_status_per_instance: "{{ec2_updated | json_query(\"results[].{value: tags.deploy_status, key: tags.Name}\") | items2dict}}"

- name: update cluster_hosts_flat with current release and deploy_status
  set_fact:
    cluster_hosts_flat: |
      {% set res = cluster_hosts_flat -%}
      {%- for host in res -%}
        {% if  current_release_per_instance[host.hostname] is  defined and current_deploy_status_per_instance[host.hostname] is defined%}
          {%- set _dummy = host.update({'current_release': current_release_per_instance[host.hostname] | string, 'current_deploy_status': current_deploy_status_per_instance[host.hostname] | string}) -%}
        {% else %}
          {%- set _dummy = host.update({'current_release': release_version, 'current_deploy_status': 'new'}) -%}
        {% endif %}
      {%- endfor %}
      {{ res }}

- block:
  - name: Get snapshots info
    ec2_snapshot_info:
      aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
      aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
      region: "{{ cluster_vars.region }}"
      filters: "{{ _snapshot_tags[0] }}"
    register: r__ebs_snapshots

  - name: Assert that snapshots exists
    assert:
      that:
        - item in _available_snapshots
      quiet: true
      fail_msg: "{{ item }}  not in available snapshots {{ _available_snapshots }}"
    loop: "{{ _configuration_snapshots }}"
    vars:
      _available_snapshots: "{{ r__ebs_snapshots.snapshots|json_query('[].tags.backup_id')|unique }}"
      _configuration_snapshots: "{{ cluster_vars[buildenv].hosttype_vars|json_query('*.auto_volumes[].snapshot_tags.*[]')|unique }}"

  - name: update cluster_hosts_flat with snapshot_id 
    set_fact:
      cluster_hosts_flat: |
        {%- for host in cluster_hosts_flat -%}
          {%- set cluster_host_topology = host.hostname | regex_replace('^.*(-.*?-).*$', '\\1') -%}
          {%- for vol in host.auto_volumes -%}
            {%- set cur_snapshot = r__ebs_snapshots | default([]) | to_json | from_json | json_query('snapshots[?contains(tags.Name, \'' + cluster_host_topology + '\')]') -%}
            {%- if cur_snapshot and 'snapshot_tags' in vol.keys() -%}
              {%- set _dummy = vol.update({'shapshot_id': cur_snapshot[0].snapshot_id}) -%}
              {%- set _dummy = vol.pop('snapshot_tags') -%}
            {%- endif %}
          {%- endfor %}
        {%- endfor %}
        {{ cluster_hosts_flat }}
  vars:
    _snapshot_tags: "{{ cluster_vars[buildenv].hosttype_vars|json_query('*.auto_volumes[].snapshot_tags')  }}"
  when: 
    - _snapshot_tags|length > 0