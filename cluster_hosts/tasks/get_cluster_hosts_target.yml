---

# Create an array of dictionaries containing all the hostnames PER-AZ (i.e. couchbase-dev-node-a0, couchbase-dev-master-a1, couchbase-dev-master-b0, couchbase-dev-master-b1 etc) to be created:
- name: get_cluster_hosts_target | Create cluster_hosts_flat from the cluster definition in cluster_vars
  set_fact:
    cluster_hosts_flat: |
      {% set res = [] -%}
      {%- for hostttype in cluster_vars[buildenv].hosttype_vars.keys() -%}
        {%- for azname in cluster_vars[buildenv].hosttype_vars[hostttype].vms_by_az.keys() -%}
          {%- for azcount in range(0,cluster_vars[buildenv].hosttype_vars[hostttype].vms_by_az[azname]|int) -%}
            {% set _dummy = res.extend([{
              'hosttype': hostttype,
              'hostname': cluster_name + '-' + hostttype + '-' + azname + azcount|string + '-' + cluster_suffix|string,
              'az_name': azname|string,
              'flavor': cluster_vars[buildenv].hosttype_vars[hostttype].flavor
              }]) -%}
          {%- endfor %}
        {%- endfor %}
      {%- endfor %}
      {{ res }}


- name: get_cluster_hosts_target/aws | AWS-specific modifications to cluster_hosts_flat - add subnets.
  block:
    # Dynamically look up VPC ID by name from aws
    - name: get_cluster_hosts_target | Looking up VPC facts to extract ID
      ec2_vpc_net_facts:
        region:         "{{ cluster_vars.region }}"
        aws_access_key: "{{ cluster_vars[buildenv].aws_access_key }}"
        aws_secret_key: "{{ cluster_vars[buildenv].aws_secret_key }}"
        filters:
          "tag:Name": "{{ cluster_vars[buildenv].vpc_name }}"
      register: r__ec2_vpc_net_facts
      delegate_to: localhost
      run_once: true

    - name: get_cluster_hosts_target/aws | Set VPC ID in variable
      set_fact:
        vpc_id: "{{ r__ec2_vpc_net_facts.vpcs[0].id }}"

    - name: get_cluster_hosts_target/aws | Look up proxy subnet facts
      ec2_vpc_subnet_facts:
        region:         "{{ cluster_vars.region }}"
        aws_access_key: "{{ cluster_vars[buildenv].aws_access_key }}"
        aws_secret_key: "{{ cluster_vars[buildenv].aws_secret_key }}"
        filters:
          "tag:Name": "{{ cluster_vars[buildenv].vpc_subnet_name_prefix }}{{item}}"
          vpc-id:     "{{ vpc_id }}"
      register: r__ec2_vpc_subnet_facts
      with_items: "{{ cluster_vars[buildenv].hosttype_vars | json_query(\"*[vms_by_az][][keys(@)][][]\") | unique }}"
      delegate_to: localhost
      run_once: true

    - name: get_cluster_hosts_target/aws | Update cluster_hosts_flat with subnet_ids
      set_fact:
        cluster_hosts_flat: |
          {% set res = cluster_hosts_flat -%}
          {%- for host in res -%}
            {%- set _dummy = host.update({'vpc_subnet_id': subnet_ids_per_az[host.az_name][0].subnet_id | string}) -%}
          {%- endfor %}
          {{ res }}
      vars:
        subnet_ids_per_az: "{{r__ec2_vpc_subnet_facts.results | json_query('[*].{az_name: item, subnet_id: subnets[0].id, subnet_name: subnets[0].tags.Name, vpc_id: subnets[0].vpc_id}') | dict_agg('az_name')}}"
  when: cluster_vars.type == "aws"


- name: get_cluster_hosts_target/gce | GCE-specific modifications to cluster_hosts_flat - add rootvol size
  block:
    - name: get_cluster_hosts_target/gce | Update cluster_hosts_flat with rootvol_size
      set_fact:
        cluster_hosts_flat: |
          {% set res = cluster_hosts_flat -%}
          {%- for host in res -%}
            {%- set _dummy = host.update({'rootvol_size': cluster_vars[buildenv].hosttype_vars[host.hosttype].rootvol_size | string}) -%}
          {%- endfor %}
          {{ res }}
  when: cluster_vars.type == "gce"

- name: get_cluster_hosts_target | cluster_hosts_flat
  debug: msg={{cluster_hosts_flat}}
