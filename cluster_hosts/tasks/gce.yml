---

- name: Update cluster_hosts_target with rootvol_size
  set_fact:
    cluster_hosts_target: |
      {% set res = cluster_hosts_target -%}
      {%- for host in res -%}
        {%- set _dummy = host.update({'rootvol_size': cluster_vars[buildenv].hosttype_vars[host.hosttype].rootvol_size | string}) -%}
      {%- endfor %}
      {{ res }}

- name: Add instance_to_create to cluster_hosts_target
  set_fact:
    cluster_hosts_target: |
      {% set res = cluster_hosts_target -%}
            {%- set _dummy = res.extend([{
              'hosttype': cluster_hosts_target | json_query('[? hostname == `' + instance_to_create_clean + '`].hosttype|[0]'),
              'hostname': instance_to_create,
              'az_name': cluster_hosts_target | json_query('[? hostname == `' + instance_to_create_clean + '`].az_name|[0]'),
              'flavor': cluster_hosts_target | json_query('[? hostname == `' + instance_to_create_clean + '`].flavor|[0]'),
              'release': release_version,
              'rootvol_size':cluster_hosts_target | json_query('[? hostname == `' + instance_to_create_clean + '`].rootvol_size|[0]')
              }]) -%}
      {{ res }}
  vars:
     instance_to_create_clean: "{{instance_to_create | regex_replace('-(?!.*-).*')}}"
  when: instance_to_create is defined and cluster_hosts_target | json_query('[? hostname == `' + instance_to_create + '`]') | length == 0

- name: Add rescuing_instance to cluster_hosts_target
  set_fact:
    cluster_hosts_target: |
      {% set res = cluster_hosts_target -%}
            {%- set _dummy = res.extend([{
              'hosttype': cluster_hosts_target | json_query('[? hostname == `' + rescuing_instance_clean + '`].hosttype|[0]'),
              'hostname': rescuing_instance,
              'az_name': cluster_hosts_target | json_query('[? hostname == `' + rescuing_instance_clean + '`].az_name|[0]'),
              'flavor': cluster_hosts_target | json_query('[? hostname == `' + rescuing_instance_clean + '`].flavor|[0]'),
              'release': release_version,
              'rootvol_size':cluster_hosts_target | json_query('[? hostname == `' + rescuing_instance_clean + '`].rootvol_size|[0]')
              }]) -%}
      {{ res }}
  vars:
     rescuing_instance_clean: "{{rescuing_instance | regex_replace('-(?!.*-).*')}}"
  when: rescuing_instance is defined and cluster_hosts_target | json_query('[? hostname == `' + rescuing_instance + '`]') | length == 0

- name: Get GCP instance facts
  gcp_compute_instance_info:
    zone: "{{cluster_vars.region}}-{{item}}"
    filters:
      - "name = {{cluster_name}}*"
      - "status = RUNNING"            # gcloud compute instances list --filter="status=RUNNING"
    project: "{{cluster_vars.project_id}}"
    auth_kind: "serviceaccount"
    service_account_file: "{{gcp_credentials_file}}"
    scopes: ["https://www.googleapis.com/auth/compute.readonly"]
  with_items: "{{ cluster_vars[buildenv].hosttype_vars | json_query(\"*[vms_by_az][][keys(@)][][]\") | unique }}"
  register: gcp_compute_instance_info
  delegate_to: localhost
  run_once: true


- set_fact:
    running_instance_fact: "{{gcp_compute_instance_info.results | json_query('[*].resources[].{name: name, deploy_status: labels.deploy_status}')}}"
    current_cluter_size: "{{gcp_compute_instance_info.results | json_query('[*].resources[]') | length}}"
  run_once: true

#- name: Update cluster_hosts_target with running_instance_fact data
#  set_fact:
#    cluster_hosts_target: |
#      {% set res = cluster_hosts_target -%}
#      {%- for host in res -%}
#        {%- if running_instance_fact[0] is defined and running_instance_fact[0] != None -%}
#          {%- for real_hostname in running_instance_fact -%}
#            {%- if real_hostname.name == host.hostname-%}
#              {%- set _dummy = host.update({'hostname': host.hostname,'gdplabel': 'exactmatch'})-%}
#            {%- elif host.hostname in real_hostname.name -%}
#              {%- if(instance_to_create is defined and instance_to_create ==  real_hostname.name) or (rescuing_instance is defined and rescuing_instance ==  real_hostname.name)-%}
#              {%- else -%}
#                {%- set _dummy = host.update({'hostname': real_hostname.name,'gdplabel': 'beginningmatchmatch'})-%}
#              {% endif -%}
#            {% endif -%}
#          {%- endfor -%}
#        {%- else -%}
#          {%- set _dummy = host.update({'hostname': host.hostname + '-' + cluster_suffix|string,'gdplabel': 'new cluster'})-%}
#        {%- endif -%}
#        {%- if host.hostname | regex_search('-([0-9]{10})$') | bool != false -%}
#          {%- set _dummy = host.update({'hostname': host.hostname + '-' + cluster_suffix|string,'gdplabel': 'missingEpoch'})-%}
#        {%- endif -%}
#      {%- endfor -%}
#      {{ res }}
#  run_once: true

- name: delete deploy_status label
  gce_labels:
    resource_name: "{{ item.hostname }}"
    resource_type: instances
    resource_location: "{{ cluster_vars.region }}-{{ item.az_name }}"
    project_id: "{{ cluster_vars.project_id }}"
    credentials_file: "{{ gcp_credentials_file }}"
    labels:
      deploy_status: "{{ deploy_status_tag }}"
    state: absent
  delegate_to: localhost
  run_once: true
  vars:
    deploy_status_tag: "{{gcp_compute_instance_info.results | json_query('[].resources[?name==`' + item.hostname + '`].labels.deploy_status | [] | [0]')}}"
  with_items: "{{cluster_hosts_target}}"
  when: deploy_status_tag != ""

- name: set deploy_status label
  gce_labels:
    resource_name: "{{item.hostname}}"
    resource_type: instances
    resource_location: "{{cluster_vars.region}}-{{item.az_name}}"
    project_id: "{{cluster_vars.project_id}}"
    credentials_file: "{{gcp_credentials_file}}"
    labels:
      deploy_status: "{%- if instance_to_create is undefined and rescuing is undefined -%}old{%- else -%}{{deploy_status_tag}}{%- endif -%}"
    state: present
  delegate_to: localhost
  run_once: true
  vars:
    created_instance_name: "{{gcp_compute_instance_info.results | json_query('[].resources[?name==`' + item.hostname + '`].name | [] | [0]')}}"
    deploy_status_tag: "{{gcp_compute_instance_info.results | json_query('[].resources[?name==`' + item.hostname + '`].labels.deploy_status | [] | [0]')}}"
  with_items: "{{cluster_hosts_target}}"
  when: created_instance_name != ""

- name: Get GCP instance facts
  gcp_compute_instance_info:
    zone: "{{cluster_vars.region}}-{{item.az_name}}"
    filters:
      - "name = {{item.hostname}}"
      - "status = RUNNING"
    project: "{{cluster_vars.project_id}}"
    auth_kind: "serviceaccount"
    service_account_file: "{{gcp_credentials_file}}"
    scopes: ["https://www.googleapis.com/auth/compute.readonly"]
  with_items: "{{cluster_hosts_target}}"
  register: gcp_compute_instance_info_updated
  delegate_to: localhost

- set_fact:
    current_release_per_instance: "{{gcp_compute_instance_info_updated.results | json_query(\"[].resources[].{value: labels.release, key: name}\") | items2dict}}"
    current_deploy_status_per_instance: "{{gcp_compute_instance_info_updated.results | json_query(\"[].resources[].{value: labels.deploy_status, key: name}\") | items2dict}}"

- name: update cluster_hosts_target with current release and deploy_status
  set_fact:
    cluster_hosts_target: |
      {% set res = cluster_hosts_target -%}
      {%- for host in res -%}
        {% if  current_release_per_instance[host.hostname] is  defined and current_deploy_status_per_instance[host.hostname] is defined%}
          {%- set _dummy = host.update({'current_release': current_release_per_instance[host.hostname] | string, 'current_deploy_status': current_deploy_status_per_instance[host.hostname] | string}) -%}
        {% else %}
          {%- set _dummy = host.update({'current_release': release_version, 'current_deploy_status': 'new'}) -%}
        {% endif %}
      {%- endfor %}
      {{ res }}

