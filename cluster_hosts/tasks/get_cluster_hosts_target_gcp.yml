---

- name: get_cluster_hosts_target/gcp | Update cluster_hosts_target auto_volumes with device_name and initialize_params
  set_fact:
    cluster_hosts_target: |-
      {%- for host in cluster_hosts_target -%}
        {%- for vol in host.auto_volumes -%}
          {%- if 'device_name' not in vol -%}
            {%- if 'lvmparams' in cluster_vars[buildenv].hosttype_vars[host.hosttype] -%}
              {%- set lvm_device_index = '-d' + loop.index|string -%}
            {%- endif -%}
            {%- set _dummy = vol.update({'device_name': host.hostname + '--' + vol.mountpoint | basename + lvm_device_index|default('') }) -%}
            {%- set _dummy = vol.update({'initialize_params': {'disk_name': vol.device_name, 'disk_size_gb': vol.volume_size }}) -%}
          {%- endif -%}
        {%- endfor %}
      {%- endfor %}
      {{ cluster_hosts_target }}


- name: get_cluster_hosts_target/gcp | cluster_vars.image can either be an AMI in its own right, or a filter to the latest AMI.
  block:
    - name: get_cluster_hosts_target/gcp | Find the image as either an discrete image or a filter
      gcp_compute_image_info:
        filters: [ "name = {{_image.name}}" ]
        project: "{{_image.project}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
      loop: "{{ cluster_hosts_target }}"
      register: r__gcp_compute_image_info__by_imageid
      vars:
        _image:
          project: "{{item.image | regex_replace('.*projects/(.*?)/.*$', '\\1') }}"
          name: "{{item.image | regex_replace('.*?images/(.*?)$', '\\1') | default('*') }}"
      delegate_to: localhost
      run_once: true

    - name: get_cluster_hosts_target/gcp | r__gcp_compute_image_info__by_imageid
      debug: msg="{{ r__gcp_compute_image_info__by_imageid }}"
      delegate_to: localhost
      run_once: true

    - name: get_cluster_hosts_target/gcp | If more than one image is found per host, it is a filter, otherwise only one will be found.  We can replace cluster_hosts_target.item.image with the latest found in either case.
      set_fact:
        cluster_hosts_target: |
          {%- for cht_host in cluster_hosts_target -%}
            {%- for r__gcp_compute_image_info_host in r__gcp_compute_image_info__by_imageid.results -%}
              {%- if r__gcp_compute_image_info_host[r__gcp_compute_image_info_host.ansible_loop_var].hostname == cht_host.hostname -%}
                {%- set _dummy = cht_host.update({'image': (r__gcp_compute_image_info_host.resources | sort(attribute='creationTimestamp'))[-1].selfLink }) -%}
              {%- endif %}
            {%- endfor %}
          {%- endfor %}
          {{ cluster_hosts_target }}
