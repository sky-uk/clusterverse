---

- name: get_cluster_hosts_state/aws | Get AWS cluster_hosts_state
  block:
    - name: get_cluster_hosts_state/aws | Get existing EC2 instance info
      ec2_instance_info:
        filters:
          "tag:cluster_name": "{{cluster_name}}"
          "instance-state-name": ["running", "stopped"]
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
      register: r__ec2_instance_info
      delegate_to: localhost
      run_once: true

    - name: get_cluster_hosts_state/aws | Set cluster_hosts_state
      set_fact:
        cluster_hosts_state: "{{r__ec2_instance_info.instances | json_query(\"[].{name: tags.Name, regionzone: placement.availability_zone, tagslabels: tags, instance_id: instance_id, instance_state: state.name}\") }}"
  when: cluster_vars.type == "aws"

- name: get_cluster_hosts_state/gcp | Get GCP cluster_hosts_state
  block:
    - name: get_cluster_hosts_state/gcp | Get existing GCE instance info (per AZ)
      gcp_compute_instance_info:
        zone: "{{cluster_vars.region}}-{{item}}"
        filters:
          - "labels.cluster_name = {{cluster_name}}"
        project: "{{cluster_vars[buildenv].vpc_project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        scopes: ["https://www.googleapis.com/auth/compute.readonly"]
      with_items: "{{ cluster_vars[buildenv].hosttype_vars | json_query(\"*[vms_by_az][][keys(@)][][]\") | unique }}"
      register: r__gcp_compute_instance_info
      delegate_to: localhost
      run_once: true

    - name: get_cluster_hosts_state/gcp | Set cluster_hosts_state with correct regionzone (remove url)
      set_fact:
        cluster_hosts_state: |
          {% set res = _cluster_hosts_state__urlregion -%}
            {%- for cluster_host in res -%}
               {%- set _ = cluster_host.update({'regionzone': cluster_host.regionzone | regex_replace('^.*/(.*)$', '\\1') }) -%}
            {%- endfor -%}
          {{ res }}
      vars:
        _cluster_hosts_state__urlregion: "{{r__gcp_compute_instance_info.results | json_query(\"[?resources[?labels]].resources[].{name: name, regionzone: zone, tagslabels: labels, instance_id: id, instance_state: status}\") }}"
  when: cluster_vars.type == "gcp"

- name: get_cluster_hosts_state_esxifree | Get VMware cluster_hosts_state
  block:
    - name: get_cluster_hosts_state/esxifree | Get existing VMware instance info
      vmware_vm_info:
        username: "{{ cluster_vars.username }}"
        password: "{{ cluster_vars.password }}"
        hostname: "{{ cluster_vars.esxi_ip }}"
        validate_certs: no
      register: r__vmware_vm_info
      delegate_to: localhost
      run_once: true

    - name: get_cluster_hosts_state/esxifree | Get existing VMware instance facts
      vmware_guest_info:
        username: "{{ cluster_vars.username }}"
        password: "{{ cluster_vars.password }}"
        hostname: "{{ cluster_vars.esxi_ip }}"
        validate_certs: no
        datacenter: None
        uuid: "{{item.uuid}}"
      with_items: "{{ r__vmware_vm_info.virtual_machines | to_json | from_json | json_query(\"[?starts_with(guest_name, '\"+cluster_name+\"')]\") }}"
      register: r__vmware_guest_info
      delegate_to: localhost
      run_once: true

    ## esxifree hosts must use the esxi 'annotations' field as json.  They are stored as unconventional text in the vmx file, so must
    ## be converted into inline-json within the facts.  If the annotation field is not convertible to json, then we don't consider this VM part of the cluster.
    - name: get_cluster_hosts_state/esxifree | update r__vmware_guest_info result with json-parsed annotations
      set_fact:
        r__vmware_guest_info: |
          {% set res = {'results': []} -%}
            {%- for result in r__vmware_guest_info.results -%}
              {%- set loadloose_res = result.instance.annotation | json_loads_loose -%}
              {%- if loadloose_res | type_debug == 'dict' or loadloose_res | type_debug == 'list' -%}
                {%- set _ = result.instance.update({'annotation': loadloose_res}) -%}
                {%- set _ = res.results.append(result) -%}
              {%- endif -%}
            {%- endfor -%}
          {{ res }}

    - name: get_cluster_hosts_state/esxifree | Set cluster_hosts_state
      set_fact:
        cluster_hosts_state: "{{ r__vmware_guest_info.results | json_query(\"[].{name: instance.hw_name, regionzone: None, tagslabels: instance.annotation, instance_id: instance.moid, instance_state: instance.hw_power_status}\") }}"

  when: cluster_vars.type == "esxifree"


- name: get_cluster_hosts_state | cluster_hosts_state
  debug: msg="{{cluster_hosts_state}}"
  delegate_to: localhost
  run_once: true
  when: cluster_hosts_state is defined

#- pause: