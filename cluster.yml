---

- name: Preflight check
  hosts: localhost:all
  connection: local
  gather_facts: false
  tasks:
    - assert: { that: "ansible_version.full is version_compare('2.6.2', '>=')", msg: "Ansible >=2.6.2 required due to bugs in older versions." }
    - assert: { that: "app_class is defined and app_class != ''", msg: "Please define app_class" }
    - assert: { that: "clusterid is defined and cluster_vars[clusterid] is defined", msg: "Please define clusterid" }
    - assert: { that: "buildenv is defined and cluster_vars[clusterid][buildenv] is defined", msg: "Please define buildenv" }
    - assert: { that: "clustername_prefix is defined and clustername_prefix != ''", msg: "Please define clustername_prefix" }
  tags: always


- name: Clean the cluster
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  roles:
    - role: clusterbuild/clean
      when: clean is defined and clean|bool
  tags: clusterbuild_clean

- name: Deploy the cluster
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  roles:
    - role: clusterbuild/create
  tags: clusterbuild_create

- name: Install Python 2 if not present (Ubuntu >16 ships with python 3 only)
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - raw: timeout 90s bash -c "test -e /usr/bin/python || (apt -qqy update && apt install -qqy python-minimal)"
      register: pyinst
      changed_when: pyinst.stdout
      retries: 10
      until: pyinst.rc == 0
  tags: python_install

- name: Perform config on the cluster
  hosts: all
  become: false
  roles:
    - role: clusterbuild/config
  tags: clusterbuild_config


## ...
## Application roles
## ...


- name: Perform cluster readiness operations (e.g. remove maintenance_mode tag from VMs).
  hosts: all
  roles:
    - role: clusterbuild/readiness
  tags: clusterbuild_readiness

