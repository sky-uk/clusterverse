pipeline {
  agent any
  parameters {
    booleanParam(name: 'GENUINE_BUILD', defaultValue: false, description: 'Tick the box to run the job')
    string(name: 'CLUSTER_ID', defaultValue:"vtp_aws_euw1", description: "MANDATORY FIELD - 'vtp_aws_euw1', 'csc_aws_euw1', 'vtp_gce_euw1', 'vtp_lsd_slo' - Specify which cloud/on-prem environment you want to deploy to")
    choice(name: 'DEPLOY_ENV', choices: ['sandbox', 'dev', 'stage', 'prod'], description: "Choose an environment to deploy")
    choice(name: 'DEPLOY_TYPE', choices: ['Deploy', 'ReDeploy', 'Clean'], description: "Choose the deploy type")
    string(name: 'CANARY', defaultValue:"none", description: "MANDATORY FIELD - 'start', 'finish', 'none' - Specify whether to start or finish a canary deploy, or 'none' deploy")
    string(name: 'MYHOSTTYPES', defaultValue:"", description: "master,slave - In redeployment you can define which host type you like to redeploy. If not defined it will redeploy all host types")
  }

  stages {
    stage('Init Environment') {
      environment {
        VAULT_PASSWORD_BUILDENV = credentials("VAULT_PASSWORD_${params.DEPLOY_ENV.toUpperCase()}")
        VAULT_PASSWORD_ALL = credentials('VAULT_PASSWORD_ALL')
        GENUINE_BUILD="${params.GENUINE_BUILD}"
      }
      steps {
        script{
          if (GENUINE_BUILD == "false"){
            error "Parameters not specified, Tick the GENUINE_BUILD box to run the job"
          }
        }          
        sh 'env'
        sh 'pipenv install --python /usr/bin/python3'
      }
    }
    stage('Execute Deploy Playbook') {
      environment {
        VAULT_PASSWORD_BUILDENV = credentials("VAULT_PASSWORD_${params.DEPLOY_ENV.toUpperCase()}")
        VAULT_PASSWORD_ALL = credentials('VAULT_PASSWORD_ALL')
        DEPLOY_ENV="${params.DEPLOY_ENV}"
      }  
      when {
        expression { params.DEPLOY_TYPE == 'Deploy' }
      }
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: "VTP_${params.DEPLOY_ENV.toUpperCase()}_SSH_KEY", keyFileVariable: 'keyfile', usernameVariable: 'sshuser')]) {
          sh 'env'
          sh 'echo "$DEPLOY_ENV: len $(echo -n $VAULT_PASSWORD_BUILDENV | /usr/bin/wc -c) sum $(echo -n $VAULT_PASSWORD_BUILDENV | /usr/bin/sum)  "'
          sh 'echo "all: len $(echo -n $VAULT_PASSWORD_ALL | /usr/bin/wc -c) sum $(echo -n $VAULT_PASSWORD_ALL | /usr/bin/sum)"'          
          sh 'pipenv run ansible-playbook  -u ${sshuser} --private-key=${keyfile}  -e buildenv=$DEPLOY_ENV -e clusterid=$CLUSTER_ID  -e skip_package_upgrade=true --vault-id=all@.vaultpass-client.py --vault-id=$DEPLOY_ENV@.vaultpass-client.py cluster.yml -e clean=false'
        }
      }
    }
    stage('Execute ReDeploy Playbook with myhosttypes') {
      environment {
        VAULT_PASSWORD_BUILDENV = credentials("VAULT_PASSWORD_${params.DEPLOY_ENV.toUpperCase()}")
        VAULT_PASSWORD_ALL = credentials('VAULT_PASSWORD_ALL')
        DEPLOY_ENV="${params.DEPLOY_ENV}"
        CANARY="-e canary=${params.CANARY}"
        MYHOSTTYPES="-e myhosttypes=${params.MYHOSTTYPES}"
      }      
      when {
        expression { params.DEPLOY_TYPE == 'ReDeploy' && params.MYHOSTTYPES != ""}
      }
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: "VTP_${params.DEPLOY_ENV.toUpperCase()}_SSH_KEY", keyFileVariable: 'keyfile', usernameVariable: 'sshuser')]) {
          sh 'env'
          sh 'echo "$DEPLOY_ENV: len $(echo -n $VAULT_PASSWORD_BUILDENV | /usr/bin/wc -c) sum $(echo -n $VAULT_PASSWORD_BUILDENV | /usr/bin/sum)  "'
          sh 'echo "all: len $(echo -n $VAULT_PASSWORD_ALL | /usr/bin/wc -c) sum $(echo -n $VAULT_PASSWORD_ALL | /usr/bin/sum)"'          
          sh 'pipenv run ansible-playbook  -u ${sshuser} --private-key=${keyfile}  -e buildenv=$DEPLOY_ENV -e clusterid=$CLUSTER_ID  -e skip_package_upgrade=true --vault-id=all@.vaultpass-client.py --vault-id=$DEPLOY_ENV@.vaultpass-client.py redeploy.yml $CANARY $MYHOSTTYPES'
        }
      }
    }
    stage('Execute ReDeploy Playbook without myhosttypes') {
      environment {
        VAULT_PASSWORD_BUILDENV = credentials("VAULT_PASSWORD_${params.DEPLOY_ENV.toUpperCase()}")
        VAULT_PASSWORD_ALL = credentials('VAULT_PASSWORD_ALL')
        DEPLOY_ENV="${params.DEPLOY_ENV}"
        CANARY="-e canary=${params.CANARY}"
      }      
      when {
        expression { params.DEPLOY_TYPE == 'ReDeploy' && params.MYHOSTTYPES == ""}
      }
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: "VTP_${params.DEPLOY_ENV.toUpperCase()}_SSH_KEY", keyFileVariable: 'keyfile', usernameVariable: 'sshuser')]) {
          sh 'env'
          sh 'echo "$DEPLOY_ENV: len $(echo -n $VAULT_PASSWORD_BUILDENV | /usr/bin/wc -c) sum $(echo -n $VAULT_PASSWORD_BUILDENV | /usr/bin/sum)  "'
          sh 'echo "all: len $(echo -n $VAULT_PASSWORD_ALL | /usr/bin/wc -c) sum $(echo -n $VAULT_PASSWORD_ALL | /usr/bin/sum)"'          
          sh 'pipenv run ansible-playbook  -u ${sshuser} --private-key=${keyfile}  -e buildenv=$DEPLOY_ENV -e clusterid=$CLUSTER_ID  -e skip_package_upgrade=true --vault-id=all@.vaultpass-client.py --vault-id=$DEPLOY_ENV@.vaultpass-client.py redeploy.yml $CANARY'
        }
      }
    }    
    stage('Execute Clean Playbook') {
      environment {
        VAULT_PASSWORD_BUILDENV = credentials("VAULT_PASSWORD_${params.DEPLOY_ENV.toUpperCase()}")
        VAULT_PASSWORD_ALL = credentials('VAULT_PASSWORD_ALL')
        DEPLOY_ENV="${params.DEPLOY_ENV}"   
      }      
      when {
        expression { params.DEPLOY_TYPE == 'Clean' }
      }
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: "VTP_${params.DEPLOY_ENV.toUpperCase()}_SSH_KEY", keyFileVariable: 'keyfile', usernameVariable: 'sshuser')]) {
          sh 'env'
          sh 'echo "$DEPLOY_ENV: len $(echo -n $VAULT_PASSWORD_BUILDENV | /usr/bin/wc -c) sum $(echo -n $VAULT_PASSWORD_BUILDENV | /usr/bin/sum)  "'
          sh 'echo "all: len $(echo -n $VAULT_PASSWORD_ALL | /usr/bin/wc -c) sum $(echo -n $VAULT_PASSWORD_ALL | /usr/bin/sum)"'          
          sh 'pipenv run ansible-playbook  -u ${sshuser} --private-key=${keyfile}  -e buildenv=$DEPLOY_ENV -e clusterid=$CLUSTER_ID  -e skip_package_upgrade=true --vault-id=all@.vaultpass-client.py --vault-id=$DEPLOY_ENV@.vaultpass-client.py cluster.yml --tags=clusterbuild_clean -e clean=true'
        }
      }            
    }
  }
}
