---

- name: create/gcp | Create network and subnetwork (if -e create_gcp_network=true)
  block:
    - name: create/gcp | Create host network (if -e create_gcp_network=true)
      gcp_compute_network:
        name: "{{cluster_vars[buildenv].vpc_network_name}}"
        auto_create_subnetworks: "{%- if cluster_vars[buildenv].vpc_subnet_name is defined and cluster_vars[buildenv].vpc_subnet_name != '' -%} false {%- else -%} true {%- endif -%}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
      register: r__gcp_compute_network

    - name: create/gcp | Create host subnetwork (if -e create_gcp_network=true)
      gcp_compute_subnetwork:
        name: "{{cluster_vars[buildenv].vpc_subnet_name}}"
        network: "{{r__gcp_compute_network}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
      when: (cluster_vars[buildenv].vpc_subnet_name is defined) and (cluster_vars[buildenv].vpc_subnet_name != "")
  when: create_gcp_network is defined and create_gcp_network|bool


- name: create/gcp | Create firewalls
  block:
    - name: create/gcp | Get network facts
      gcp_compute_network_info:
        filters:
          - "name = {{cluster_vars[buildenv].vpc_network_name}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        scopes: ["https://www.googleapis.com/auth/compute.readonly"]
      register: r__gcp_compute_network_info

    - name: "Assert that {{cluster_vars[buildenv].vpc_network_name}} network exists"
      assert: { that: "r__gcp_compute_network_info['resources'] | length > 0", msg: "The {{cluster_vars[buildenv].vpc_network_name}} network must exist (create with ' -e create_gcp_network=true')" }

    - name: create/gcp | Get subnetwork facts
      gcp_compute_subnetwork_info:
        filters:
          - "name = {{cluster_vars[buildenv].vpc_subnet_name}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        scopes: ["https://www.googleapis.com/auth/compute.readonly"]
        region: "{{cluster_vars.region}}"
      register: r__gcp_compute_subnetwork_info
      when: (cluster_vars[buildenv].vpc_subnet_name is defined) and (cluster_vars[buildenv].vpc_subnet_name != "")

    - name: "Assert that {{cluster_vars[buildenv].vpc_subnet_name}} subnet exists"
      assert: { that: "r__gcp_compute_subnetwork_info['resources'] | length > 0", msg: "The {{cluster_vars[buildenv].vpc_subnet_name}} subnet must exist" }
      when: (cluster_vars[buildenv].vpc_subnet_name is defined) and (cluster_vars[buildenv].vpc_subnet_name != "")

    - name: create/gcp | Create cluster firewalls
      gcp_compute_firewall:
        name: "{{ item.name }}"
        target_tags: "{{cluster_vars.network_fw_tags}}"
        allowed: "{{ item.allowed }}"
        description: "{{ item.description }}"
        source_ranges: "{{ item.source_ranges | default([]) }}"
        source_tags: "{{ item.source_tags | default([]) }}"
        direction: "{{ item.direction | default(INGRESS) }}"
        network: "{{r__gcp_compute_network_info['resources'][0]}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
      with_items: "{{ cluster_vars.firewall_rules }}"


- name: create/gcp | Create VMs asynchronously and wait for completion
  block:
    - name: create/gcp | Detach volumes from previous instances (during the _scheme_rmvm_keepdisk_rollback redeploy, we only redeploy one host at a time, and it is already powered off)
      gce_pd:
        credentials_file: "{{gcp_credentials_file}}"
        service_account_email: "{{ (lookup('file', gcp_credentials_file) | from_json).client_email }}"
        project_id: "{{cluster_vars[buildenv].vpc_project_id}}"
        zone: "{{cluster_vars.region}}-{{item.az_name}}"
        detach_only : yes
        state: deleted
        instance_name: "{{ item.auto_volume.src.hostname }}"
        name: "{{item.auto_volume.src.source_url | basename}}"
      loop: "{{ cluster_hosts_target_denormalised_by_volume | selectattr('auto_volume.src', 'defined') | list }}"

    - name: create/gcp | Create VMs asynchronously
      gcp_compute_instance:
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_project_id}}"
        zone: "{{cluster_vars.region}}-{{item.az_name}}"
        name: "{{item.hostname}}"
        machine_type: "{{item.flavor}}"
        disks: "{{ [_bootdisk] + (_autodisks | default([])) }}"
        metadata: "{{ cluster_vars.metadata | default(omit) }}"
        labels: "{{ _labels | combine(cluster_vars.custom_tagslabels | default({})) }}"
        network_interfaces:
          - network: "{{ r__gcp_compute_network_info['resources'][0] | default({}) }}"
            subnetwork: "{{ r__gcp_compute_subnetwork_info['resources'][0] | default({}) }}"
            access_configs: "{%- if cluster_vars.assign_public_ip == 'yes' -%}[{\"name\": \"External NAT\", \"type\": \"ONE_TO_ONE_NAT\"}]{%- else -%}[]{%- endif -%}"
        tags: { items: "{{cluster_vars.network_fw_tags}}" }
        can_ip_forward: "{{cluster_vars.ip_forward}}"
        scheduling: { automatic_restart: yes, preemptible: "{{cluster_vars[buildenv].preemptible}}" }
        state: present
        deletion_protection: "{{cluster_vars[buildenv].deletion_protection}}"
      vars:
        _bootdisk: {auto_delete: true, boot: true, device_name: "{{ item.hostname }}--boot", initialize_params: {source_image: "{{item.image}}", disk_name: "{{ item.hostname }}--boot", disk_size_gb: "{{ cluster_vars[buildenv].hosttype_vars[item.hosttype].rootvol_size | default(omit) }}"}}
        _autodisks: "{{item.auto_volumes | json_query(\"[].{auto_delete: auto_delete, interface: interface, device_name: device_name, initialize_params: initialize_params, source: {selfLink: src.source_url}}\") }}"
        _labels:
          name: "{{item.hostname}}"
          inv_node_version: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].version | default(omit)}}"
          inv_node_type: "{{item.hosttype}}"
          hosttype: "{{item.hosttype}}"
          cluster_name: "{{cluster_name}}"
          cluster_suffix: "{{cluster_suffix}}"
          owner: "{{ lookup('env','USER') | lower }}"
          maintenance_mode: "true"
          release: "{{ release_version }}"
          lifecycle_state: "current"
      register: r__gcp_compute_instance
      with_items: "{{cluster_hosts_target}}"
      async: 7200
      poll: 0

    - name: create/gcp | Wait for GCE instance creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: r__async_status__gcp_compute_instance
      until: r__async_status__gcp_compute_instance.finished
      delay: 3
      retries: 300
      with_items: "{{r__gcp_compute_instance.results}}"

    - name: create/gcp | r__async_status__gcp_compute_instance.results
      debug: msg={{r__async_status__gcp_compute_instance.results}}

    - name: create/gcp | Set a fact containing the newly-created hosts
      set_fact:
        cluster_hosts_created: "{{ gcp_jobs.results | json_query(\"[?item.changed==`true`].item.item\") }}"

    - name: create/gcp | Label the volumes
      gce_labels:
        project_id: "{{cluster_vars[buildenv].vpc_project_id}}"
        credentials_file: "{{gcp_credentials_file}}"
        resource_url: "{{item.resource_url}}"
        labels: "{{ _labels | combine(cluster_vars.custom_tagslabels | default({})) }}"
      with_items: "{{_ec2_vols_denormalised_by_device}}"
      vars:
        _ec2_vols_denormalised_by_device: |-
          {% set res = [] -%}
          {%- for host_instance in r__async_status__gcp_compute_instance.results -%}
            {%- for disk in host_instance.disks -%}
              {% set _ = res.append({'hostname': host_instance.name , 'hosttype': host_instance.labels.hosttype, 'device_name': disk.deviceName, 'disk_name': disk.source | basename, 'resource_url': disk.source, 'regionzone': host_instance.invocation.module_args.zone}) -%}
            {%- endfor %}
          {%- endfor %}
          {{ res }}
        _labels:
          name: "{{ item.device_name }}"
          inv_node_version: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].version | default(omit)}}"
          inv_node_type: "{{item.hosttype}}"
          owner: "{{ lookup('env','USER') | lower }}"
          release: "{{ release_version }}"

#    - name: create/gcp | Attach (or create) volumes where 'src' is present (e.g. inserted as part of _scheme_rmvm_keepdisk_rollback scheme)
#      gce_pd:
#        credentials_file: "{{gcp_credentials_file}}"
#        service_account_email: "{{ (lookup('file', gcp_credentials_file) | from_json).client_email }}"
#        project_id: "{{cluster_vars[buildenv].vpc_project_id}}"
#        zone: "{{cluster_vars.region}}-{{item.az_name}}"
#        delete_on_termination: yes
#        disk_type : "{{item.auto_volume.volume_type | default(omit)}}"
#        instance_name: "{{ item.hostname }}"
#        mode: "READ_WRITE"
#        name: "{{item.auto_volume.device_name}}"
#        size_gb : "{%- if 'src' not in item.auto_volume -%}{{item.auto_volume.volume_size}}{%- endif -%}"
#      loop: "{{ cluster_hosts_target_denormalised_by_volume | selectattr('auto_volume.src', 'defined') | list }}"
#      async: 7200
#      poll: 0
#      register: r__gce_pd
#
#    - name: create/aws | Wait for volume creation/ attachment to complete
#      async_status: { jid: "{{ item.ansible_job_id }}" }
#      register: r__async_status__gce_pd
#      until: r__async_status__gce_pd.finished
#      delay: 3
#      retries: 300
#      with_items: "{{r__gce_pd.results}}"
#
#    - name: create/gcp | Get existing GCE instance info (per AZ)
#      gcp_compute_instance_info:
#        zone: "{{cluster_vars.region}}-{{item}}"
#        filters:
#          - "labels.cluster_name = {{cluster_name}}"
#          - "labels.lifecycle_state = current"
#        project: "{{cluster_vars[buildenv].vpc_project_id}}"
#        auth_kind: "serviceaccount"
#        service_account_file: "{{gcp_credentials_file}}"
#        scopes: ["https://www.googleapis.com/auth/compute.readonly"]
#      with_items: "{{ cluster_vars[buildenv].hosttype_vars | json_query(\"*[vms_by_az][][keys(@)][][]\") | unique }}"
#      register: r__gcp_compute_instance_info
#
#    - name: create/gcp | r__gcp_compute_instance_info.results
#      debug: msg={{r__gcp_compute_instance_info.results}}
#
#    - name: create/gcp | Label the volumes
#      gce_labels:
#        project_id: "{{cluster_vars[buildenv].vpc_project_id}}"
#        credentials_file: "{{gcp_credentials_file}}"
#        resource_url: "{{item.resource_url}}"
#        labels: "{{ _labels | combine(cluster_vars.custom_tagslabels | default({})) }}"
#      with_items: "{{_ec2_vols_denormalised_by_device}}"
#      vars:
#        _ec2_vols_denormalised_by_device: |-
#          {% set res = [] -%}
#          {%- for zone_result in r__gcp_compute_instance_info.results -%}
#            {%- for host_instance in zone_result.resources -%}
#              {%- for disk in host_instance.disks -%}
#                {% set _ = res.append({'hostname': host_instance.name , 'hosttype': host_instance.labels.hosttype, 'device_name': disk.deviceName, 'disk_name': disk.source | basename, 'resource_url': disk.source, 'regionzone': zone_result.invocation.module_args.zone}) -%}
#              {%- endfor %}
#            {%- endfor %}
#          {%- endfor %}
#          {{ res }}
#        _labels:
#          name: "{{ item.device_name }}"
#          inv_node_version: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].version | default(omit)}}"
#          inv_node_type: "{{item.hosttype}}"
#          owner: "{{ lookup('env','USER') | lower }}"
#          release: "{{ release_version }}"

#    - name: create/gcp | Label the volumes   ## DOES NOT ADD / MODITY LABELS ON EXISTING DISKS (cannot use for attaching and relabelling existing disks)
#      gcp_compute_disk:
#        auth_kind: "serviceaccount"
#        service_account_file: "{{gcp_credentials_file}}"
#        project: "{{cluster_vars[buildenv].vpc_project_id}}"
#        zone: "{{item.regionzone}}"
#        name: "{{item.disk_name}}"
#        labels: "{{ _labels | combine(cluster_vars.custom_tagslabels | default({})) }}"
