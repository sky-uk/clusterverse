---

- name: Ensure that the 'release' tag/label is consistent within a cluster.  Perform this here (rather than roles/clusterverse/cluster_hosts/) to allow redeploy to change the version (i.e. after lifecycle_state is set to retiring).
  block:
    - name: current_release_versions
      debug: msg="{{current_release_versions}}"

    - block:
        - assert: { that: "current_release_versions | unique | length <= 1", msg: "Multiple 'current' release_versions running ({{current_release_versions | join(',')}}) - abort" }

        - assert: { that: "current_release_versions[0] == release_version", msg: "'version' tag/label applied differs from command line release_version: ('{{current_release_versions[0]}}' != '{{release_version}}') - abort" }
          when: (current_release_versions | length)  and  (release_version is defined and release_version != "")
      when: (skip_release_version_check is not defined)  or  (skip_release_version_check is defined  and  (not skip_release_version_check|bool))

    - name: Set the release_version to that defined in the current cluster
      set_fact:
        release_version: "{{ current_release_versions[0] | default('') }}"

    - debug: msg="release_version = {{release_version}}"
  vars:
    current_release_versions: "{{ cluster_hosts_state | json_query(\"[?tagslabels.lifecycle_state=='current' && tagslabels.release].tagslabels.release\") | default([]) }}"


- name: "Create {{cluster_vars.type}} cluster"
  include_tasks: "create_{{cluster_vars.type}}.yml"
  vars:
    # auto_volumes are normally a list of volumes per host (list of list).  We cannot iterate this within a non-nested ansible loop (with_items), so we denormalise/ flatten it into a new one-dimensional list, of each volume, as well as all the parent host information.
    cluster_hosts_target_denormalised_by_volume: |
      {% set res = [] -%}
      {%- for cht_host in cluster_hosts_target -%}
        {%- for autovol in cht_host.auto_volumes -%}
          {%- set elem = {} -%}
          {%- for cht_host_key in cht_host.keys() -%}
            {%- if cht_host_key != 'auto_volumes' -%}
              {%- set _ = elem.update({cht_host_key: cht_host[cht_host_key]}) -%}
            {%- else -%}
              {%- set _ = elem.update({'auto_volume': autovol}) -%}
            {%- endif -%}
          {%- endfor -%}
          {%- set _ = res.append(elem) -%}
        {%- endfor -%}
      {%- endfor -%}
      {{res}}
