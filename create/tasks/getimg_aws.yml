---

- name: create/getimg/aws | cluster_vars.image can either be an AMI in its own right, or a filter to the latest AMI found in manifest-location...
  block:
    - name: create/getimg/aws | Attempt to find AMI from cluster_vars.image
      ec2_ami_info:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
        filters: { image-id: "{{ cluster_vars.image }}" }
      register: r__ec2_ami_info__by_imageid

    - name: create/getimg/aws | If cluster_vars.image is not an AMI, try to find it via manifest-location
      block:
        - name: create/getimg/aws | get ansible_architecture fact (for localhost)
          setup: { filter: ansible_architecture }

        - name: create/getimg/aws | Search for ami by using cluster_vars.image as a 'manifest-location'
          ec2_ami_info:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            region: "{{cluster_vars.region}}"
            filters: { manifest-location: "{{ cluster_vars.image }}", architecture: "{{ansible_architecture}}" }
          register: r__ec2_ami_info__by_location

        - block:
            - debug: msg="create/getimg/aws | Using '{{ repl_image.image_location }}' as cluster_base_image"

            - name: create/getimg/aws | Replace cluster_base_image with the latest AMI found at 'manifest-location'
              set_fact:
                cluster_base_image: "{{ repl_image.image_id }}"
          when: r__ec2_ami_info__by_location.images | length > 0
          vars:
            repl_image: "{{ (r__ec2_ami_info__by_location.images | sort(attribute='creation_date'))[-1] }}"
      when: r__ec2_ami_info__by_imageid.images | length == 0
