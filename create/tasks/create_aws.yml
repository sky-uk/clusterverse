---

- name: cluster_hosts_target_denormalised_by_volume
  debug: msg="{{cluster_hosts_target_denormalised_by_volume}}"

- name: create/aws | Create security groups
  ec2_group:
    name: "{{ cluster_name }}-sg"
    description: "{{ cluster_name }} rules"
    region: "{{cluster_vars.region}}"
    vpc_id: "{{vpc_id}}"
    aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
    aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
    tags:
      Name: "{{ cluster_name }}-sg"
      env: "{{ buildenv }}"
    rules: "{{ cluster_vars.secgroup_new }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: r__ec2_group
  when: cluster_vars.secgroup_new | length > 0

- name: create/aws | Create EC2 VMs asynchronously and wait for completion
  block:
    - name: create/aws | Detach volumes from previous instances (during the _scheme_rmvm_keepdisk_rollback redeploy, we only redeploy one host at a time, and it is already powered off)
      ec2_vol:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
        id: "{{item.auto_volume.src.volume_id}}"
        instance: None
      loop: "{{ cluster_hosts_target_denormalised_by_volume | selectattr('auto_volume.src', 'defined') | list }}"

    - name: create/aws | Create EC2 VMs asynchronously
      amazon.aws.ec2_instance:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
        key_name: "{{cluster_vars[buildenv].key_name}}"
        instance_type: "{{item.flavor}}"
        instance_role: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].instance_profile_name | default(cluster_vars.instance_profile_name | default(omit))}}"
        instance_initiated_shutdown_behavior: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].instance_initiated_shutdown_behavior | default(omit)}}"
#        spot_price: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].spot.spot_price | default(omit)}}" # spot instance tpyes cannot be used with the ec2_instance module at this time
#        spot_wait_timeout: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].spot.spot_wait_timeout | default(10800)}}"    #3 hours
#        spot_launch_group: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].spot.spot_launch_group | default(omit)}}"
#        spot_type: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].spot.spot_type | default('persistent')}}"
        image_id: "{{ item.image }}"
        vpc_subnet_id: "{{item.vpc_subnet_id}}"
        network:
          assign_public_ip: "{{cluster_vars.assign_public_ip | bool}}"
        security_groups: "{{ cluster_vars.secgroups_existing }} {%- if cluster_vars.secgroup_new | length > 0 -%} + {{ ([r__ec2_group.group_name | default()] | default())}} {%- endif -%}"
        wait: yes
        tags: "{{ _instance_tags | combine(cluster_vars.custom_tagslabels | default({})) }}"
        termination_protection: "{{cluster_vars[buildenv].termination_protection}}"
        user_data: "{{ cluster_vars.user_data | default(omit) }}"
        volumes: |
          {%- set res = [] -%}
          {%- for vol in item.auto_volumes -%}
            {%- if 'src' not in vol -%}
              {%- if 'volume_type' in vol and vol.volume_type == 'ephemeral' -%}
                {%- set _dummy = res.append({ 'device_name': vol.device_name, 'volume_name': vol.ephemeral }) -%}
              {%- else -%}
                {%- set _dummy = res.append({ 'device_name': vol.device_name, 'ebs': {'volume_type': vol.volume_type, 'volume_size': vol.volume_size } }) -%}
                {%- if 'iops' in vol -%} {%- set _dummy = res[res|length-1].ebs.update({'iops': vol.iops}) -%} {%- endif -%}
                {%- if 'snapshot' in vol -%} {%- set _dummy = res[res|length-1].ebs.update({'snapshot_id': vol.snapshot}) -%} {%- endif -%}
                {%- if 'encrypted' in vol -%} {%- set _dummy = res[res|length-1].ebs.update({'encrypted': vol.encrypted}) -%} {%- endif -%}
                {%- if 'delete_on_termination' in vol -%} {%- set _dummy = res[res|length-1].ebs.update({'delete_on_termination': vol.delete_on_termination}) -%} {%- endif -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor %}
          {{ res }}
        filters: { "tag:Name": "{{item.hostname}}", "instance-state-name": ["running", "pending"] }
        exact_count: 1
        ec2_url: "{{ cluster_vars.aws_endpoint_url | default(omit) }}"
      vars:
        _instance_tags:
          Name: "{{item.hostname}}"
          inv_node_version: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].version | default(omit)}}"
          inv_node_type: "{{item.hosttype}}"
          hosttype: "{{item.hosttype}}"
          cluster_name: "{{cluster_name}}"
          cluster_suffix: "{{cluster_suffix}}"
          owner: "{{ lookup('env','USER') | lower }}"
          maintenance_mode: "true"
          release: "{{ release_version }}"
          lifecycle_state: "current"
      loop: "{{ cluster_hosts_target }}"
      async: 7200
      poll: 0
      register: r__ec2

    - name: ec2_instance keys debug check
      debug: msg={{aws_access_key}}

    - name: create/aws | Wait for aws instance creation to complete
      async_status: { jid: "{{ item.ansible_job_id }}" }
      register: r__async_status__ec2
      until: r__async_status__ec2.finished
      delay: 3
      retries: 300
      with_items: "{{r__ec2.results}}"

    - name: create/aws | r__async_status__ec2.results
      debug: msg={{r__async_status__ec2.results}}

    - name: create/aws | Set a fact containing the newly-created hosts
      set_fact:
        cluster_hosts_created: "{{ r__async_status__ec2.results | json_query(\"[?changed==`true`].item.item\") }}"

    - name: create/aws | Attach (or create) volumes where 'src' is present (e.g. inserted as part of _scheme_rmvm_keepdisk_rollback scheme)
      ec2_vol:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
        instance: "{{ r__async_status__ec2.results | json_query(\"[].tagged_instances[?tags.Name==`\" + item.hostname + \"`].id[] | [0]\") | default(omit) }}"
        id: "{{item.auto_volume.src.volume_id | default(omit)}}"
        snapshot: "{{item.auto_volume.snapshot | default(omit)}}"
        device_name: "{{item.auto_volume.device_name}}"
        encrypted: "{{item.auto_volume.encrypted}}"
        volume_size: "{%- if 'src' in item.auto_volume -%}{{omit}}{%- else -%}{{item.auto_volume.volume_size}}{%- endif -%}"
        volume_type: "{{item.auto_volume.volume_type}}"
        iops: "{{item.auto_volume.iops | default(omit)}}"
        delete_on_termination: yes
      loop: "{{ cluster_hosts_target_denormalised_by_volume | selectattr('auto_volume.src', 'defined') | list }}"
      async: 7200
      poll: 0
      register: r__ec2_vol

    - name: create/aws | Wait for volume creation/ attachment to complete
      async_status: { jid: "{{ item.ansible_job_id }}" }
      register: r__async_status__ec2_vol
      until: r__async_status__ec2_vol.finished
      delay: 3
      retries: 300
      with_items: "{{r__ec2_vol.results}}"

#    - name: create/aws | r__async_status__ec2_vol
#      debug: msg={{r__async_status__ec2_vol}}


- name: create/aws | Tag the EBS volumes
  block:
    - name: create/aws | Get the ec2_instance_info for EBS tagging
      ec2_instance_info:
        filters:
          "instance-state-name": ["running", "stopped"]
          "tag:cluster_name": "{{cluster_name}}"
          "tag:lifecycle_state": "current"
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
      register: r__ec2_instance_info

    - name: create/aws | Set the ec2 volume name tag
      ec2_tag:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
        resource: "{{item.volume_id}}"
        tags: "{{ _tags | combine(cluster_vars.custom_tagslabels | default({})) }}"
      with_items: "{{_ec2_vols_denormalised_by_device}}"
      vars:
        _ec2_vols_denormalised_by_device: |
          {% set res = [] -%}
          {%- for host_instance in r__ec2_instance_info.instances -%}
            {%- for block_device in host_instance.block_device_mappings -%}
              {% set _ = res.append({'hostname': host_instance.tags.Name, 'hosttype': host_instance.tags.hosttype, 'device_name': block_device.device_name, 'volume_id': block_device.ebs.volume_id}) -%}
            {%- endfor %}
          {%- endfor %}
          {{ res }}
        _tags:
          Name: "{{ item.hostname }}--{{item.device_name | regex_replace('^.*\\/(.*)', '\\1')}}"
          device_name: "{{item.device_name}}"
          inv_node_version: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].version | default(omit)}}"
          inv_node_type: "{{item.hosttype}}"
          owner: "{{ lookup('env','USER') | lower }}"
          release: "{{ release_version }}"
