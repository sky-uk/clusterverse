---

- name: create/aws | Create AWS security group
  ec2_group:
    name: "{{ cluster_name }}-sg"
    description: "{{ cluster_name }} rules"
    region: "{{cluster_vars.region}}"
    vpc_id: "{{vpc_id}}"
    aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
    aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
    tags:
      Name: "{{ cluster_name }}-sg"
      env: "{{ buildenv }}"
    rules: "{{ cluster_vars.secgroup_new }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: r__ec2_group
  when: cluster_vars.secgroup_new | length > 0

- name: create/aws | Create EC2 VMs asynchronously and wait for completion
  block:
    - name: create/aws | Create EC2 VMs asynchronously
      ec2:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
        key_name: "{{cluster_vars[buildenv].key_name}}"
        instance_type: "{{item.flavor}}"
        instance_profile_name: "{{cluster_vars.instance_profile_name  | default(omit)}}"
        image: "{{cluster_vars.image}}"
        vpc_subnet_id: "{{item.vpc_subnet_id}}"
        assign_public_ip: "{{cluster_vars.assign_public_ip}}"
        group: "{{ cluster_vars.secgroups_existing }} {%- if cluster_vars.secgroup_new | length > 0 -%} + {{ ([r__ec2_group.group_name | default()] | default())}} {%- endif -%}"
        wait: yes
        instance_tags:
          Name: "{{item.hostname}}"
          hosttype: "{{item.hosttype}}"
          env: "{{buildenv}}"
          cluster_name: "{{cluster_name}}"
          cluster_suffix: "{{cluster_suffix}}"
          owner: "{{ lookup('env','USER')| lower  }}"
          maintenance_mode: "{%- if prometheus_set_unset_maintenance_mode|bool -%}true{%- else -%}false{%- endif -%}"
          release: "{{ release_version }}"
          lifecycle_state: "current"
        termination_protection: "{{cluster_vars[buildenv].termination_protection}}"
        volumes: "{{ item.auto_volumes | default([]) }}"
        count_tag:
          Name: "{{item.hostname}}"
        exact_count: 1
      with_items: "{{cluster_hosts_target}}"
      async: 7200
      poll: 0
      register: aws_instances

    - name: create/aws | Wait for aws instance creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: aws_jobs
      until: aws_jobs.finished
      delay: 3
      retries: 300
      with_items: "{{aws_instances.results}}"

#    - name: create/aws | aws_jobs.results
#      debug: msg={{aws_jobs.results}}

    - name: create/aws | Set a fact containing the newly-created hosts
      set_fact:
        cluster_hosts_created: "{{ aws_jobs.results | json_query(\"[?changed==`true`].item.item\") }}"

    - name: create/aws | Force set maintenance_mode to true (when prometheus_set_unset_maintenance_mode)
      ec2_tag:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
        resource: "{{ item }}"
        tags:
          maintenance_mode: "true"
      with_items: "{{ aws_jobs.results | json_query('[].tagged_instances[0].id')}}"
      when: (prometheus_set_unset_maintenance_mode is defined and prometheus_set_unset_maintenance_mode|bool)

    - name: create/aws | Extract EBS volume data so we can tag the disks
      set_fact:
        ebsdata: |
          {% set res = [] -%}
          {%- for host in aws_jobs.results -%}
            {%- for devkey in host.tagged_instances[0].block_device_mapping.keys()-%}
            {% set _dummy = res.extend([{
              'hostname': host.tagged_instances[0].tags.Name,
              'ec2_id': host.tagged_instances[0].id,
              'device_name': devkey,
              'volume_id': host.tagged_instances[0].block_device_mapping[devkey].volume_id
              }]) -%}
            {%- endfor %}
          {%- endfor %}
          {{ res }}

#    - name: create/aws | ebsdata
#      debug: msg={{ebsdata}}

    - name: create/aws | Set the ec2 volume name tag
      ec2_tag:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
        resource: "{{item.volume_id}}"
        tags:
          Name: "{{ item.hostname }}--{{item.device_name | regex_replace('^.*\\/(.*)', '\\1')}}"
      with_items: "{{ebsdata}}"
