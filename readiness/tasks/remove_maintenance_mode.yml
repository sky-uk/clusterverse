---

- block:
    - name: remove_maintenance_mode/aws | Get existing AWS EC2 instance info
      ec2_instance_info:
        filters:
          "tag:cluster_name": "{{cluster_name}}"
          "instance-state-name": ["running", "stopped"]
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
      register: r__ec2_instance_info
      delegate_to: localhost
      run_once: true

    - name: remove_maintenance_mode/aws | Set maintenance_mode to false
      ec2_tag:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        region: "{{cluster_vars.region}}"
        resource: "{{ item }}"
        tags:
          maintenance_mode: "false"
      delegate_to: localhost
      run_once: true
      with_items: "{{ r__ec2_instance_info.instances | json_query(\"[].instance_id\") }}"
  when: cluster_vars.type == "aws"

- block:
    - name: remove_maintenance_mode/gcp | Get existing GCP GCE instance info (per AZ)
      gcp_compute_instance_info:
        zone: "{{cluster_vars.region}}-{{item}}"
        filters:
          - "labels.cluster_name = {{cluster_name}}"
        project: "{{cluster_vars.project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        scopes: ["https://www.googleapis.com/auth/compute.readonly"]
      with_items: "{{ cluster_vars[buildenv].hosttype_vars | json_query(\"*[vms_by_az][][keys(@)][][]\") | unique }}"
      register: r__gcp_compute_instance_info
      delegate_to: localhost
      run_once: true

    # Use this because the gce_labels command does not replace existing labels.  https://github.com/ansible/ansible/pull/59891
    - name: remove_maintenance_mode/gcp | Set maintenance_mode to false
      gcp_compute_instance:
        name: "{{item.name}}"
        project: "{{cluster_vars.project_id}}"
        zone: "{{ item.zone | regex_replace('^.*/(.*)$', '\\1') }}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        deletion_protection: "{{cluster_vars[buildenv].deletion_protection}}"
        status: "{{item.status}}"
        labels: "{{ item.labels | combine({'maintenance_mode': 'false'}) }}"
      with_items: "{{ r__gcp_compute_instance_info.results | json_query(\"[?resources[?labels]].resources[]\") }}"
      delegate_to: localhost
      run_once: true
  when: cluster_vars.type == "gcp"
