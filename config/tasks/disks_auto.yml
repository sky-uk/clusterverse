---
#- debug: msg={{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].auto_volumes }}
- debug: msg={{ ansible_facts.devices }}
- block:
    - name: autodisks | Get unused block devices
      set_fact:
        block_devices: "{{ {'dev': item, 'size_b': (ansible_facts.devices[item].sectors|int) * (ansible_facts.devices[item].sectorsize|int)} }}"
      with_items: "{{ ansible_facts.devices }}"
      register: block_devices_list
      when: item | regex_search("nvme|[xvsh]+d") and ansible_facts.devices[item].partitions == {}

    - name: autodisks | Create unused block devices list
      set_fact:
        lsblk_volumes: "{{ block_devices_list.results | map(attribute='ansible_facts.block_devices') | select('defined') | list }}"

    - debug: msg={{ lsblk_volumes }}

- name: autodisks | Create 'hostvols' fact that contains a list of available host devices (lsblk) mapped to the mountpoints defined in cluster_vars.  Allow for multiple disks with same size.
  set_fact:
    hostvols: |
      {% set res = [] -%}
      {% set tmp_blkvols = lsblk_volumes -%}
        {%- for autovol in cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].auto_volumes -%}
          {%- set blkvolloop = namespace(break=false) -%}
          {%- for blkvol in tmp_blkvols if not blkvolloop.break -%}
            {%- if (autovol.volume_size*1073741824|int) == (blkvol.size_b|int) -%}
              {%- set _ = res.extend([ {'device': '/dev/'+blkvol.dev, 'mountpoint': autovol.mountpoint, 'fstype': autovol.fstype, 'perms': autovol.perms | default({})}]) -%}
              {%- set _ = tmp_blkvols.remove(blkvol) -%}
              {%- set blkvolloop.break = true -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      {{ res }}

#- debug: msg={{hostvols}}

# Create partition-less filesystems.
- name: autodisks | Create filesystem(s) on attached volume(s)
  become: yes
  filesystem:
    fstype: "{{ item.fstype }}"
    dev: "{{ item.device }}"
    force: no
  with_items: "{{ hostvols }}"
  register: created_filesystem
  retries: 5
  delay: 1
  until: created_filesystem is not failed

- name: autodisks | Mount created filesytem(s) persistently
  become: yes
  mount:
    path: "{{ item.mountpoint }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    state: mounted
    opts: _netdev
  with_items: "{{ hostvols }}"

- name: autodisks | change ownership of mountpoint (if set)
  become: yes
  file:
    path: "{{ item.mountpoint }}"
    state: directory
    mode: "{{ item.perms.mode | default(omit)}}"
    owner: "{{ item.perms.owner | default(omit)}}"
    group: "{{ item.perms.group | default(omit)}}"
  with_items: "{{ hostvols }}"
