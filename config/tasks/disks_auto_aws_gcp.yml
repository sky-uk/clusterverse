---

- name: disks_auto_aws_gcp | cluster_hosts_target(inventory_hostname)
  debug: msg={{ cluster_hosts_target | json_query(\"[?hostname == `\" + inventory_hostname + \"`] \") }}

- name: disks_auto_aws_gcp | Mount block devices as individual disks
  block:
    - name: disks_auto_aws_gcp | auto_vols
      debug: msg={{ auto_vols }}

    - name: disks_auto_aws_gcp | Get the block device information (pre-filesystem create)
      blockdevmap:
        cloud_type: "{{cluster_vars.type}}"
      become: yes
      register: r__blockdevmap

    - name: disks_auto_aws_gcp | r__blockdevmap (pre-filesystem create)
      debug: msg={{r__blockdevmap}}

    - name: disks_auto_aws_gcp | Create filesystem (partitionless)
      become: yes
      filesystem:
        fstype: "{{ item.fstype }}"
        dev: "{{ _dev }}"
      loop: "{{auto_vols}}"
      vars:
        _dev: "{{ r__blockdevmap.device_map | json_query(\"[?device_name_cloud == `\" + item.device_name + \"` && TYPE==`disk` && parttable_type==`` && FSTYPE==`` && MOUNTPOINT==``].device_name_os | [0]\") }}"
      when: _dev is defined and _dev != ''

    - name: disks_auto_aws_gcp | Get the block device information (post-filesystem create), to get the block IDs for mounting
      blockdevmap:
        cloud_type: "{{cluster_vars.type}}"
      become: yes
      register: r__blockdevmap

    - name: disks_auto_aws_gcp | r__blockdevmap (post-filesystem create)
      debug: msg={{r__blockdevmap}}

    - name: disks_auto_aws_gcp | Mount created filesytem(s) persistently
      become: yes
      mount:
        path: "{{ item.mountpoint }}"
        src: "UUID={{ _UUID }}"
        fstype: "{{ item.fstype }}"
        state: mounted
        opts: _netdev
      loop: "{{auto_vols}}"
      vars:
        _UUID: "{{ r__blockdevmap.device_map | json_query(\"[?device_name_cloud == `\" + item.device_name + \"` && TYPE==`disk` && parttable_type==`` && MOUNTPOINT==``].UUID | [0]\") }}"
      when: _UUID is defined and _UUID != ''

    - name: disks_auto_aws_gcp | change ownership of mountpoint (if set)
      become: yes
      file:
        path: "{{ item.mountpoint }}"
        state: directory
        mode: "{{ item.perms.mode | default(omit)}}"
        owner: "{{ item.perms.owner | default(omit)}}"
        group: "{{ item.perms.group | default(omit)}}"
      loop: "{{auto_vols}}"

    - block:
        - name: disks_auto_aws_gcp | Touch a file with the mountpoint and device name for testing that disk attachment is correct
          become: yes
          file:
            path: "{{item.mountpoint}}/__clusterversetest_{{ item.mountpoint | regex_replace('\\/', '_') }}_{{ item.device_name | regex_replace('\/', '_') }}"
            state: touch
          loop: "{{auto_vols}}"

        - name: disks_auto_aws_gcp | Find all __clusterversetest_ files in newly mounted disks
          find:
            paths: "{{item.mountpoint}}"
            patterns: "__clusterversetest_*"
          loop: "{{auto_vols}}"
          register: r__find_test

        - name: disks_auto_aws_gcp | Display all __clusterversetest_ files in newly mounted disks.
          debug:
            msg: "{{ r__find_test | json_query(\"results[].{device_name: item.device_name, mountpoint: item.mountpoint, files: files[].path}\") }}"
      when: test_touch_disks is defined and test_touch_disks|bool
  when: (auto_vols | map(attribute='mountpoint') | list | unique | count == auto_vols | map(attribute='mountpoint') | list | count)
  vars:
    auto_vols: "{{ cluster_hosts_target | json_query(\"[?hostname == `\" + inventory_hostname + \"`].auto_volumes[]\") }}"


# The following block mounts all attached volumes that have a single, common mountpoint, by creating a logical volume
- name: disks_auto_aws_gcp | Mount block devices in a single LVM mountpoint through LV/VG
  block:
    - name: disks_auto_aws_gcp | Install logical volume management tooling. (yum - RedHat/CentOS)
      become: true
      yum:
        name: "lvm*"
        state: present
      when: ansible_os_family == 'RedHat'

    - name: disks_auto_aws_gcp | Get the device information (pre-filesystem create)
      blockdevmap:
      become: yes
      register: r__blockdevmap

    - name: disks_auto_aws_gcp | r__blockdevmap (pre-filesystem create)
      debug: msg={{r__blockdevmap}}

    - name: disks_auto_aws_gcp | Create a volume group from all block devices
      become: yes
      lvg:
        vg:  "{{ hosttype_vars.lvmparams.vg_name }}"
        pvs: "{{ r__blockdevmap.device_map | json_query(\"[?device_name_cloud && contains('\" + auto_vol_device_names + \"', device_name_cloud)].device_name_os\") | join(',')}}"
      vars:
        auto_vol_device_names: "{{hosttype_vars.auto_volumes | map(attribute='device_name') | sort  | join(',')}}"

    - name: disks_auto_aws_gcp | Create a logical volume from volume group
      become: yes
      lvol:
        vg: "{{ hosttype_vars.lvmparams.vg_name }}"
        lv: "{{ hosttype_vars.lvmparams.lv_name }}"
        size: "{{ hosttype_vars.lvmparams.lv_size }}"

    - name: disks_auto_aws_gcp | Create filesystem(s) on attached volume(s)
      become: yes
      filesystem:
        fstype: "{{ hosttype_vars.auto_volumes[0].fstype }}"
        dev: "/dev/{{ hosttype_vars.lvmparams.vg_name }}/{{ hosttype_vars.lvmparams.lv_name }}"
        force: no

    - name: disks_auto_aws_gcp | Mount created filesytem(s) persistently
      become: yes
      mount:
        path: "{{ hosttype_vars.auto_volumes[0].mountpoint }}"
        src: "/dev/{{ hosttype_vars.lvmparams.vg_name }}/{{ hosttype_vars.lvmparams.lv_name }}"
        fstype: "{{ hosttype_vars.auto_volumes[0].fstype }}"
        state: mounted
        opts: _netdev

    - block:
        - name: disks_auto_aws_gcp | Touch a file with the mountpoint and device name for testing that disk attachment is correct
          become: yes
          file:
            path: "{{ hosttype_vars.auto_volumes[0].mountpoint }}/__clusterversetest_{{ hosttype_vars.auto_volumes[0].mountpoint | regex_replace('\\/', '_') }}"
            state: touch

        - name: disks_auto_aws_gcp | Find all __clusterversetest_ files in newly mounted disks
          find:
            paths: "{{ hosttype_vars.auto_volumes[0].mountpoint }}"
            patterns: "__clusterversetest_*"
          register: r__find_test

        - name: disks_auto_aws_gcp | Display all __clusterversetest_ files in newly mounted disks.
          debug:
            msg: "{{ r__find_test | json_query(\"files[].path\") }}"
      when: test_touch_disks is defined and test_touch_disks|bool
  when: ('lvmparams' in hosttype_vars) and (hosttype_vars.auto_volumes | map(attribute='mountpoint') | list | unique | count == 1) and (hosttype_vars.auto_volumes | map(attribute='mountpoint') | list | count >= 2) and (hosttype_vars.auto_volumes | map(attribute='fstype') | list | unique | count == 1)
  vars:
    hosttype_vars: "{{ cluster_hosts_target | json_query(\"[?hostname == `\" + inventory_hostname + \"`]\") }}"
