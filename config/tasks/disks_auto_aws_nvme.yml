---
#- debug: msg={{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme_volumes }}
#- debug: msg={{ ansible_facts.devices }}
- block:
    - name: autodisks_nvme | Get unused block devices
      set_fact:
        block_devices: "{{ {'dev': item, 'size_b': (ansible_facts.devices[item].sectors|int) * (ansible_facts.devices[item].sectorsize|int)} }}"
      with_items: "{{ ansible_facts.devices }}"
      register: block_devices_list
      when: item | regex_search("nvme") and ansible_facts.devices[item].partitions == {}

    - name: autodisks_nvme | Create unused block devices list
      set_fact:
        lsblk_volumes: "{{ block_devices_list.results | map(attribute='ansible_facts.block_devices') | select('defined') | list }}"

    - name: autodisks_nvme | lsblk_volumes
      debug: msg={{ lsblk_volumes }}

    - name: autodisks_nvme | Create 'nvmevols' fact that contains a list of available host nvme devices (lsblk) mapped to the mountpoints defined in cluster_vars. Handles single mounting points with LV/VG
      set_fact:
        nvmevols: |
          {% set res = [] -%}
          {% set tmp_blkvols = lsblk_volumes -%}
            {%- for nvmevol in cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.volumes -%}
              {%- set blkvolloop = namespace(break=false) -%}
              {%- for blkvol in tmp_blkvols if not blkvolloop.break -%}
                {%- if (nvmevol.volume_size*1000000000|int) == (blkvol.size_b|int) -%}
                  {%- set _ = res.extend([ {'device': '/dev/'+blkvol.dev, 'mountpoint': nvmevol.mountpoint, 'fstype': nvmevol.fstype, 'perms': autovol.perms | default({})}]) -%}
                  {%- set _ = tmp_blkvols.remove(blkvol) -%}
                  {%- set blkvolloop.break = true -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endfor -%}
          {{ res }}

    - name: autodisks_nvme | nvme mountpoints
      debug: msg={{ nvmevols | map(attribute='mountpoint') | list | unique }}

    # The following block mounts all nvme attached volumes that have individual mountpoints
    - name: autodisks_nvme | Mount nvme volumes with different mountpoints
      block:
        - name: autodisks_nvme | Create filesystem(s) on attached nvme volume(s)
          become: yes
          filesystem:
            fstype: "{{ item.fstype }}"
            dev: "{{ item.device }}"
            force: no
          with_items: "{{ nvmevols }}"

        - name: autodisks_nvme | Mount nvme created filesytem(s) persistently
          become: yes
          mount:
            path: "{{ item.mountpoint }}"
            src: "{{ item.device }}"
            fstype: "{{ item.fstype }}"
            state: mounted
            opts: _netdev
          with_items: "{{ nvmevols }}"

        - name: autodisks_nvme | change ownership of mountpoint (if set)
          become: yes
          file:
            path: "{{ item.mountpoint }}"
            state: directory
            mode: "{{ item.perms.mode | default(omit)}}"
            owner: "{{ item.perms.owner | default(omit)}}"
            group: "{{ item.perms.group | default(omit)}}"
          with_items: "{{ nvmevols }}"
      when: (nvmevols | map(attribute='mountpoint') | list | unique | count == nvmevols | map(attribute='mountpoint') | list | count)

    # The following block mounts all nvme attached volumes that have a single, common mountpoint, by creating a logical volume
    - name: autodisks_nvme | Mount nvme volumes in a single mountpoint through LV/VG
      block:
        #- debug: msg={{nvmevols | map(attribute='device') | join(',')}}

        - name: autodisks_nvme | Install logical volume management tooling. (yum - RedHat/CentOS)
          become: true
          yum:
            name: "lvm*"
            state: present
          when: ansible_os_family == 'RedHat'

        - name: autodisks_nvme | Create a volume group from all nvme devices
          become: yes
          lvg:
            vg:  "{{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.lvmparams.vg_name }}"
            pvs: "{{nvmevols | map(attribute='device') | join(',')}}"

        - name: autodisks_nvme | Create a logical volume from volume group
          become: yes
          lvol:
            vg: "{{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.lvmparams.vg_name }}"
            lv: "{{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.lvmparams.lv_name }}"
            size: "{{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.lvmparams.lv_size }}"

        - name: autodisks_nvme | Create filesystem(s) on attached nvme volume(s)
          become: yes
          filesystem:
            fstype: "{{ nvmevols | map(attribute='fstype') | list | unique | join('') }}"
            dev: "/dev/{{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.lvmparams.vg_name }}/{{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.lvmparams.lv_name }}"
            force: no

        - name: autodisks_nvme | Mount created filesytem(s) persistently
          become: yes
          mount:
            path: "{{ nvmevols | map(attribute='mountpoint') | list | unique | join('') }}"
            src: "/dev/{{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.lvmparams.vg_name }}/{{ cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.lvmparams.lv_name }}"
            fstype: "{{ nvmevols | map(attribute='fstype') | list | unique | join('') }}"
            state: mounted
            opts: _netdev
      when: (nvmevols | map(attribute='mountpoint') | list | unique | count == 1) and (nvmevols | map(attribute='mountpoint') | list | count >= 2) and (nvmevols | map(attribute='fstype') | list | unique | count == 1)
  when: (cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.volumes is defined) and (cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.volumes|length > 0) and (cluster_vars[buildenv].hosttype_vars[hostvars[inventory_hostname].hosttype].nvme.volumes != "[]")
