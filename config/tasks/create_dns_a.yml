---

- name: config/dns/a/nsupdate | create/update A records in bind (nsupdate)
  nsupdate:
    key_name: "{{bind9[buildenv].key_name}}"
    key_secret: "{{bind9[buildenv].key_secret}}"
    server: "{{bind9[buildenv].server}}"
    ttl: 60
    zone: "{{dns_tld_external}}"
    record: "{{item.hostname}}.{{cluster_vars.dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
    value: "{{ hostvars[item.hostname]['ansible_host'] }}"
  become: false
  delegate_to: localhost
  run_once: true
  with_items: "{{ cluster_hosts_flat }}"
  when: cluster_vars.dns_server == "nsupdate"

- name: config/dns/a/route53 | create/update A records in AWS (route53)
  route53:
    aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
    aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
    state: present
    zone: "{{dns_tld_external}}"
    record: "{{item.hostname}}.{{cluster_vars.dns_zone_external}}"
    type: A
    ttl: 60
    value: "{{ hostvars[item.hostname]['ansible_host'] }}"
    private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
    overwrite: true
  become: false
  delegate_to: localhost
  run_once: true
  with_items: "{{ cluster_hosts_flat }}"
  when: cluster_vars.dns_server=="route53"

- name: config/dns/a/clouddns | create/update A records in GCP (clouddns)
  block:
    - name: config/dns/a/clouddns | Gather info for a pre-existing GCP Managed Zone and store as dict
      gcp_dns_managed_zone_info:
        auth_kind: serviceaccount
        dns_name: "{{dns_tld_external}}"
        project: "{{cluster_vars.project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
      register: r__gcp_dns_managed_zone_info
      become: false
      delegate_to: localhost
      run_once: true

    - name: config/dns/a/clouddns | create/update A records in GCP (clouddns)
      gcp_dns_resource_record_set:
        auth_kind: serviceaccount
        managed_zone:
          name: "{{r__gcp_dns_managed_zone_info.resources.0.name}}"
          dnsName: "{{r__gcp_dns_managed_zone_info.resources.0.dnsName}}"
        name: "{{item.hostname}}.{{cluster_vars.dns_zone_external}}"
        project: "{{cluster_vars.project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
        state: present
        target: "{%- if r__gcp_dns_managed_zone_info.resources.0.visibility == 'private' -%} {{ hostvars[item.hostname]['ansible_default_ipv4']['address'] }} {%- else -%} {{ hostvars[item.hostname]['ansible_host'] }} {%- endif -%}"
        type: A
        ttl: 60
      become: false
      delegate_to: localhost
      run_once: true
      with_items: "{{ cluster_hosts_flat }}"
  when: cluster_vars.dns_server=="clouddns"


- name: "config/dns/a/dig | Check that DNS has updated (or otherwise wait for it to do so)  [Note lookup('dig', new_fqdn) doesn't work - seems to cache - https://github.com/ansible/ansible/issues/44128].  NOTE: The TTL of the SOA must be short enough for this not to time-out."
  shell: "dig {{new_fqdn}} +short"
  register: dig_result
  until: "dig_result.stdout == new_ip"
  retries: 31
  delay: 10
  with_items: "{{ cluster_hosts_flat }}"
  vars:
    new_fqdn: "{{item.hostname}}.{{cluster_vars.dns_zone_external}}."
    new_ip: "{{hostvars[item.hostname].ansible_host}}"
  become: false
  delegate_to: localhost
  run_once: true
  when: wait_for_dns is defined and wait_for_dns|bool