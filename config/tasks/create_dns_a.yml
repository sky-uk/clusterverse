---

- name: config/dns/a/nsupdate | create/update A records in bind (nsupdate)
  nsupdate:
    key_name: "{{bind9[buildenv].key_name}}"
    key_secret: "{{bind9[buildenv].key_secret}}"
    server: "{{bind9[buildenv].server}}"
    ttl: 60
    zone: "{{cluster_vars.dns_nameserver_zone}}"
    record: "{{item.hostname}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.' + cluster_vars.dns_nameserver_zone, '\\1')}}"
    value: "{{ hostvars[item.hostname]['ansible_host'] }}"
  become: false
  delegate_to: localhost
  run_once: true
  with_items: "{{ cluster_hosts_target }}"
  when: cluster_vars.dns_server == "nsupdate"

- name: config/dns/a/route53 | create/update A records in AWS (route53)
  route53:
    aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
    aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
    state: present
    zone: "{{cluster_vars.dns_nameserver_zone}}"
    record: "{{item.hostname}}.{{cluster_vars.dns_user_domain}}"
    type: A
    ttl: 60
    value: "{{ hostvars[item.hostname]['ansible_host'] }}"
    private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
    overwrite: true
    wait: yes
  become: false
  delegate_to: localhost
  run_once: true
  with_items: "{{ cluster_hosts_target }}"
  when: cluster_vars.dns_server=="route53"
  async: 7200
  poll: 0
  register: route53_records

- name: config/dns/a/route53 | Wait for records to bereplicated to all Amazon Route 53 DNS servers
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: route53_jobs
  until: route53_jobs.finished
  delay: 1
  retries: 300
  run_once: true
  with_items: "{{route53_records.results}}"
  delegate_to: localhost

- name: config/dns/a/clouddns | create/update A records in GCP (clouddns)
  block:
    - name: config/dns/a/clouddns | Gather info for a pre-existing GCP Managed Zone and store as dict
      gcp_dns_managed_zone_info:
        auth_kind: serviceaccount
        dns_name: "{{cluster_vars.dns_nameserver_zone}}"
        project: "{{cluster_vars.project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
      register: r__gcp_dns_managed_zone_info
      become: false
      delegate_to: localhost
      run_once: true

    - name: config/dns/a/clouddns | create/update A records in GCP (clouddns)
      gcp_dns_resource_record_set:
        auth_kind: serviceaccount
        managed_zone:
          name: "{{r__gcp_dns_managed_zone_info.resources.0.name}}"
          dnsName: "{{r__gcp_dns_managed_zone_info.resources.0.dnsName}}"
        name: "{{item.hostname}}.{{cluster_vars.dns_user_domain}}"
        project: "{{cluster_vars.project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
        state: present
        target: "{%- if r__gcp_dns_managed_zone_info.resources.0.visibility == 'private' -%} {{ hostvars[item.hostname]['ansible_default_ipv4']['address'] }} {%- else -%} {{ hostvars[item.hostname]['ansible_host'] }} {%- endif -%}"
        type: A
        ttl: 60
      become: false
      delegate_to: localhost
      run_once: true
      with_items: "{{ cluster_hosts_target }}"
  when: cluster_vars.dns_server=="clouddns"

- block:
    - name: config/dns/a/dig | debug whether we'll use external_dns_resolver
      debug:
        msg: "{% if not hostvars[item.hostname].ansible_host | regex_search('^(10.|192.168|172.1[6-9].|172.2[0-9].|172.3[01].).*') %}@{{external_dns_resolver}}{% endif %}"
      with_items: "{{ cluster_hosts_target }}"
      run_once: true

    - name: "config/dns/a/dig | Check that DNS has updated (or otherwise wait for it to do so)  [Note: lookup('dig', new_fqdn) doesn't work - seems to cache - https://github.com/ansible/ansible/issues/44128].  NOTE: A short TTL on the SOA helps if a negative cache is created.  If this is an external IP, check external DNS (otherwise only the internal VPC IP will be returned)"
      shell: "dig {{new_fqdn}} +short {% if not hostvars[item.hostname].ansible_host | regex_search('^(10.|192.168|172.1[6-9].|172.2[0-9].|172.3[01].).*') %}@{{external_dns_resolver}}{% endif %}"
      register: dig_result
      until: "dig_result.stdout == new_ip"
      retries: 31
      delay: 10
      with_items: "{{ cluster_hosts_target }}"
      vars:
        new_fqdn: "{{item.hostname}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.?$','\\1')}}."      # Add a '.' to the fadn, (but only if there's not one already)
        new_ip: "{{hostvars[item.hostname].ansible_host}}"
      become: false
      run_once: true
  when: wait_for_dns is defined and wait_for_dns|bool