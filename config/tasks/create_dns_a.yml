---

- block:
    - name: config/dns/a/nsupdate | create/update A records in bind (nsupdate)
      community.general.nsupdate:
        key_name: "{{cluster_vars[buildenv].nsupdate_cfg.key_name | default(bind9[buildenv].key_name)}}"
        key_secret: "{{cluster_vars[buildenv].nsupdate_cfg.key_secret | default(bind9[buildenv].key_secret)}}"
        server: "{{cluster_vars[buildenv].nsupdate_cfg.server | default(bind9[buildenv].server)}}"
        ttl: 60
        zone: "{{cluster_vars.dns_nameserver_zone}}"
        record: "{{item.hostname}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.?' + cluster_vars.dns_nameserver_zone, '\\1')}}"
        value: "{{ hostvars[item.hostname]['ansible_host'] }}"
      become: false
      delegate_to: localhost
      run_once: true
      with_items: "{{ cluster_hosts_target }}"

    - name: config/dns/a/nsupdate | Wait for a short delay to allow zone transfers to complete (help prevent negative cache)
      pause:
        seconds: 10
  when: cluster_vars.dns_server == "nsupdate"

- block:
    - name: config/dns/a/route53 | Gather info for pre-existing Hosted Zones (public and/or private)
      community.aws.route53_info:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        query: hosted_zone
      become: false
      delegate_to: localhost
      register: r__route53_info__zones

    - name: config/dns/a/route53 | create/update A records for all matching zones, (public and/or private) in AWS (route53)
      community.aws.route53:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        state: present
        zone: "{{cluster_vars.dns_nameserver_zone}}"
        record: "{{item.hostname}}.{{cluster_vars.dns_user_domain}}"
        type: A
        ttl: 60
        value: "{{ item.ipv4 }}"
        private_zone: "{{ item.private_zone }}"
        overwrite: true
        wait: yes
      become: false
      delegate_to: localhost
      run_once: true
      with_items: |
        {% set res = [] -%}
        {%- for cht_host in cluster_hosts_target -%}
          {%- for hosted_zone in r__route53_info__zones.HostedZones | default([]) | json_query('[?Name==`' + cluster_vars.dns_nameserver_zone + '.`]') -%}
            {%- if hosted_zone.Config.PrivateZone|bool == true and 'ipv4_private' in hostvars[cht_host.hostname] -%}
              {%- set _ = res.append({'hostname': cht_host.hostname, 'private_zone': hosted_zone.Config.PrivateZone, 'ipv4': hostvars[cht_host.hostname]['ipv4_private']}) -%}
            {%- elif hosted_zone.Config.PrivateZone|bool == false and 'ipv4_public' in hostvars[cht_host.hostname] -%} 
              {%- set _ = res.append({'hostname': cht_host.hostname, 'private_zone': hosted_zone.Config.PrivateZone, 'ipv4': hostvars[cht_host.hostname]['ipv4_public']}) -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
        {{res}}
      async: 7200
      poll: 0
      register: r__route53

    - name: config/dns/a/route53 | Wait for records to be replicated to all Amazon Route 53 DNS servers
      block:
        - name: config/dns/a/route53 | Wait for records to be replicated to all Amazon Route 53 DNS servers
          async_status:
            jid: "{{ item.ansible_job_id }}"
          register: route53_jobs
          until: route53_jobs.finished
          delay: 1
          retries: 300
          run_once: true
          with_items: "{{r__route53.results}}"
          delegate_to: localhost

      # rescue A-record creation in AWS (route53) to cope with the error below (this is most frequent when creating 15+ nodes clusters)
      # "Timeout waiting for resource records changes to be applied: Waiter resource_record_setsChanged failed: Rate exceeded"
      rescue:
        - name: config/dns/a/route53 | Resubmit A records in AWS (route53) which failed the previous step
          community.aws.route53:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            state: present
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            record: "{{item.item.item.hostname}}.{{cluster_vars.dns_user_domain}}"
            type: A
            ttl: 60
            value: "{{item.item.item.ipv4}}"
            private_zone: "{{item.item.item.private_zone}}"
            overwrite: true
            wait: yes
          become: false
          delegate_to: localhost
          run_once: true
          with_items: "{{route53_jobs.results | json_query(\"[?failed==`true`]\")}}"
  when: cluster_vars.dns_server=="route53"

- name: config/dns/a/clouddns | create/update A records in GCP (clouddns)
  block:
    - name: config/dns/a/clouddns | Gather info for pre-existing Managed Zones (public and/or private)
      google.cloud.gcp_dns_managed_zone_info:
        auth_kind: serviceaccount
        dns_name: "{{cluster_vars.dns_nameserver_zone}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
      register: r__gcp_dns_managed_zone_info
      become: false
      delegate_to: localhost
      run_once: true

    - name: config/dns/a/clouddns | create/update A records for all matching zones, (public and/or private) in GCP (clouddns)
      google.cloud.gcp_dns_resource_record_set:
        auth_kind: serviceaccount
        managed_zone:
          name: "{{item.1.name}}"
          dnsName: "{{item.1.dnsName}}"
        name: "{{item.0.hostname}}.{{cluster_vars.dns_user_domain}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
        state: present
        target: "{%- if item.1.visibility == 'private' or 'ipv4_public' not in hostvars[item.0.hostname] -%} {{ hostvars[item.0.hostname]['ipv4_private'] }} {%- else -%} {{ hostvars[item.0.hostname]['ipv4_public'] }} {%- endif -%}"
        type: A
        ttl: 60
      with_nested:
        - "{{ cluster_hosts_target }}"
        - "{{ r__gcp_dns_managed_zone_info.resources | json_query(\"[?dnsName==`\" + cluster_vars.dns_nameserver_zone + \"` && !(peeringConfig)]\") }}"
      become: false
      delegate_to: localhost
      run_once: true
      register: r__gcp_dns_resource_record_set
      until: r__gcp_dns_resource_record_set is success
      retries: 10
  when: cluster_vars.dns_server=="clouddns"

- block:
    - name: Install 'dig (bind-utils)' for ns lookups. (yum - RedHat/CentOS)
      become: true
      yum:
        name: "bind-utils"
        state: present
      when: ansible_os_family == 'RedHat'

    - name: config/dns/a/dig | debug whether we'll use external_dns_resolver
      debug:
        msg: "{% if not hostvars[item.hostname].ansible_host | regex_search('^(10\\.|192.168|172.1[6-9]\\.|172.2[0-9]\\.|172.3[01]\\.).*') %}@{{external_dns_resolver}}{% endif %}"
      with_items: "{{ cluster_hosts_target }}"
      run_once: true

    - name: "config/dns/a/dig | Check that DNS has updated (or otherwise wait for it to do so)  [Note: lookup('dig', new_fqdn) doesn't work - seems to cache - https://github.com/ansible/ansible/issues/44128].  NOTE: A short TTL on the SOA helps if a negative cache is created.  If this is an external IP, check external DNS (otherwise only the internal VPC IP will be returned)"
      shell: "dig {{new_fqdn}} +short {% if not hostvars[item.hostname].ansible_host | regex_search('^(10\\.|192.168|172.1[6-9]\\.|172.2[0-9]\\.|172.3[01]\\.).*') %}@{{external_dns_resolver}}{% endif %}"
      register: dig_result
      until: "dig_result.stdout == new_ip"
      retries: 31
      delay: 10
      with_items: "{{ cluster_hosts_target }}"
      vars:
        new_fqdn: "{{item.hostname}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.?$','\\1')}}."      # Add a '.' to the fadn, (but only if there's not one already)
        new_ip: "{{hostvars[item.hostname].ansible_host}}"
      become: false
      run_once: true
  when: wait_for_dns is defined and wait_for_dns|bool