---

- name: disable and kill unattended upgrades to prevent dpkg locks
  block:
    - name: Disable timers for unattended upgrade, so that none will be triggered by the `date -s` call.
      command: systemctl disable --now {{item}}
      become: true
      with_items:
        - 'apt-daily.timer'
        - 'apt-daily-upgrade.timer'

    - name: Reload systemctl daemon to apply the new changes
      command: systemctl daemon-reload
      become: true

    - name: Wait for any possibly running unattended upgrade to finish
      command: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true
      become: true

    - name: Purge unattended upgrades
      command: apt-get -y purge unattended-upgrades
      become: true

- name: Disable requiretty in sudoers to enable pipelining
  become: yes
  lineinfile:
    dest: /etc/sudoers
    regexp: '(^Defaults requiretty)$'
    line: '#\1",'
    backrefs: yes
  vars:
    ansible_ssh_pipelining: no

- name: Add hostname to hosts (gives hostname resolution without calling out to DNS.  Needed on Ubuntu.)
  become: yes
  lineinfile:
    path: /etc/hosts
    regexp: '^{{ansible_default_ipv4.address}}'
    line: '{{ansible_default_ipv4.address}} {{inventory_hostname}}.{{cluster_vars.dns_zone_external}} {{inventory_hostname}}'
#    regexp: '^127\.0\.1\.1'
#    line: '127.0.1.1 {{inventory_hostname}}'
    insertbefore: "BOF"

- name: Create /var/log/journal
  become: true
  file:
    path: "/var/log/journal"
    state: directory
    mode: 0755
  when: (static_journal is defined and static_journal|bool)

  # Run this *before* the general auto_volumes tasks, because we need them to be eliminated before we try to mount the other disks.
- name: Attach nvme_volumes
  include_tasks: disks_auto_aws_nvme.yml
  when: cluster_vars.type == "aws"

- name: Attach auto_volumes
  include_tasks: disks_auto.yml

- name: install prometheus node exporter daemon
  include_tasks: prometheus_node_exporter.yml
  when: (prometheus_node_exporter_install is defined and prometheus_node_exporter_install|bool)

- name: Install elastic filebeat
  include_tasks: filebeat.yml
  when: (filebeat_install is defined and filebeat_install|bool)

- name: Install security cloud agent
  include_tasks: cloud_agents.yml
  when: (cloud_agent is defined and cloud_agent)

- name: Update packages (when do_package_upgrade is defined)
  include_tasks: pkgupdate.yml
  when: do_package_upgrade is defined and do_package_upgrade|bool

- name: Set hostname (e.g. AWS doesn't set it automatically)
  become: true
  hostname:
    name: "{{inventory_hostname.split('.')[0]}}"


- name: Create/ Update DNS A records using nsupdate (if applicable)
  nsupdate:
    key_name: "{{bind9[buildenv].key_name}}"
    key_secret: "{{bind9[buildenv].key_secret}}"
    server: "{{bind9[buildenv].server}}"
    ttl: 60
    zone: "{{dns_tld_external}}"
    record: "{{item.hostname}}.{{cluster_vars.dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
    value: "{{ hostvars[item.hostname]['ansible_host'] }}"
  become: false
  delegate_to: localhost
  run_once: true
  with_items: "{{ cluster_hosts_flat }}"
  when: (cluster_vars.dns_server is defined and cluster_vars.dns_server != "") and cluster_vars.dns_server == "nsupdate" and cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != ""

- name: Create/ Update DNS A records in Route53 (if applicable)
  route53:
    aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
    aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
    state: present
    zone: "{{cluster_vars.dns_zone_external}}"
    record: "{{item.hostname}}.{{cluster_vars.dns_zone_external}}"
    type: A
    ttl: 60
    value: "{{ hostvars[item.hostname]['ansible_host'] }}"
    private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
    overwrite: true
  become: false
  delegate_to: localhost
  run_once: true
  with_items: "{{ cluster_hosts_flat }}"
  when: (cluster_vars.dns_server is defined and cluster_vars.dns_server != "") and cluster_vars.dns_server=="route53" and (cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != "")

- name: Check that DNS has updated (or otherwise wait for it to do so)  [Note lookup('dig', new_fqdn) doesn't work - seems to cache - https://github.com/ansible/ansible/issues/44128]
  shell: "dig {{new_fqdn}} +short @{{bind9[buildenv].server}}"
  register: dig_result
  until: "dig_result.stdout == new_ip"
  retries: 60
  delay: 5
  with_items: "{{ cluster_hosts_flat }}"
  vars:
    new_fqdn: "{{item.hostname}}.{{cluster_vars.dns_zone_external}}."
    new_ip: "{{hostvars[item.hostname].ansible_host}}"
  become: false
  delegate_to: localhost
  run_once: true
  when: (cluster_vars.dns_server is defined and cluster_vars.dns_server != "" and cluster_vars.dns_server == "nsupdate") and (cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != "")

- name: "Create CNAME record"
  nsupdate:
    key_name: "{{bind9[buildenv].key_name}}"
    key_secret: "{{bind9[buildenv].key_secret}}"
    server: "{{bind9[buildenv].server}}"
    zone: "{{dns_tld_external}}"
    record: "{{item.hostname | regex_replace('-(?!.*-).*')}}.{{cluster_vars.dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
    value:  "{{item.hostname}}.{{cluster_vars.dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
    type: CNAME
    state: present
    ttl: 30
  with_items: "{{ cluster_hosts_flat }}"
  when: cluster_vars.dns_server == "nsupdate" and instance_to_create is undefined and rescuing_instance is undefined
  delegate_to: localhost
  run_once: true

- name: "Create CNAME record"
  route53:
    aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
    aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
    state: present
    zone: "{{cluster_vars.dns_zone_external}}"
    record: "{{item.hostname | regex_replace('-(?!.*-)[0-9]{10}$')}}.{{cluster_vars.dns_zone_external}}"
    type: CNAME
    ttl: 30
    value: "{{item.hostname}}.{{cluster_vars.dns_zone_external}}"
    private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
    overwrite: true
  become: false
  delegate_to: localhost
  run_once: true
  with_items: "{{ cluster_hosts_flat }}"
  when: cluster_vars.dns_server == "route53" and instance_to_create is undefined and rescuing_instance is undefined
