---

- name: poweroff_vms | hosts_to_stop
  debug: msg="{{hosts_to_stop}}"

- block:
    - name: poweroff_vms | Power-off AWS EC2 VM(s) and set maintenance_mode=true
      block:
        - name: poweroff_vms | Set maintenance_mode label on AWS VM(s)
          ec2_tag:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            region: "{{cluster_vars.region}}"
            resource: "{{ item.instance_id }}"
            tags:
              maintenance_mode: "true"
          with_items: "{{ hosts_to_stop }}"

        - name: poweroff_vms | Power-off AWS EC2 VM(s)
          ec2:
            aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            region: "{{ cluster_vars.region }}"
            state: "stopped"
            instance_ids: "{{ hosts_to_stop | json_query(\"[].instance_id\") }}"
            wait: true
          delegate_to: localhost
          run_once: true
      when: cluster_vars.type == "aws"


    - name: poweroff_vms | Power-off GCP GCE VMs asynchronously
      block:
        - name: poweroff_vms | Power-off GCP GCE VM(s) and set maintenance_mode=true
          gcp_compute_instance:
            name: "{{item.name}}"
            project: "{{cluster_vars.project_id}}"
            zone: "{{ item.regionzone }}"
            auth_kind: "serviceaccount"
            service_account_file: "{{gcp_credentials_file}}"
            deletion_protection: "{{cluster_vars[buildenv].deletion_protection}}"
            status: "TERMINATED"
            labels: "{{ item.tagslabels | combine({'maintenance_mode': 'true'}) }}"
          with_items: "{{ hosts_to_stop }}"
          register: r__gcp_compute_instance
          async: 7200
          poll: 0

        - name: poweroff_vms | Wait for GCP GCE instance(s) to power-off
          async_status:
            jid: "{{ item.ansible_job_id }}"
          register: async_jobs
          until: async_jobs.finished
          retries: 300
          with_items: "{{r__gcp_compute_instance.results}}"
      when: cluster_vars.type == "gcp"
  when: hosts_to_stop | length