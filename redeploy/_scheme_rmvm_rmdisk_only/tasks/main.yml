---

- name: Preflight check
  block:
    - assert: { that: "non_current_hosts | length == 0", msg: "ERROR - All VMs must be in the 'current' lifecycle_state.  Those not [{{non_current_hosts | join(',')}}]"  }
      vars:
        non_current_hosts: "{{ cluster_hosts_state | json_query(\"[?tagslabels.lifecycle_state!='current'].name\") }}"
      when: canary=="start" or canary=="none"

    - assert: { that: "{{chs_hosts | difference(chf_hosts) | length==0}}", fail_msg: "Cannot use this scheme to redeploy to smaller cluster; [{{ chs_hosts | join(',') }}] > [{{ chf_hosts | join(',') }}]" }
      vars:
        chf_hosts: "{{ cluster_hosts_target | json_query(\"[].hostname\") | map('regex_replace', '-(?!.*-).*') | list }}"
        chs_hosts: "{{ cluster_hosts_state | json_query(\"[].name\") | map('regex_replace', '-(?!.*-).*') | list }}"

    - assert: { that: "canary != 'tidy'", fail_msg: "'tidy' is not valid for this redeploy scheme" }


- name: Run redeploy per hosttype.  Delete one at a time, then reprovision.
  include_tasks: by_hosttype.yml
  with_items: "{{ myhosttypes_array }}"
  loop_control:
    loop_var: hosttype
  vars:
    cluster_hosts_dict: "{{cluster_hosts_target | dict_agg('hosttype')}}"
    myhosttypes_array: "{%- if myhosttypes is defined -%} {{ myhosttypes.split(',') }} {%- else -%} {{ cluster_hosts_dict.keys() | list }} {%- endif -%}"
