---

- name: Attempt redeploy.  Restore old if fails
  block:
    - name: canary==start or canary==none
      block:
        - assert: { that: "'retiring' not in (cluster_hosts_state | map(attribute='tagslabels.lifecycle_state'))", msg: "ERROR - There are already machines in the 'retiring' state." }

        - include_tasks: set_lifecycle_state_label.yml
          vars: { old_state: "current", new_state: "retiring" }

        - name: "Run {{mainclusteryml}} to provision new cluster (and skip readiness (e.g. DNS CNAMES))"
          shell: "{{ (argv | join(' ')) | regex_replace('redeploy.yml', mainclusteryml) }} --skip-tags=clusterverse_readiness"
          register: r__mainclusteryml

        - debug: msg={{r__mainclusteryml}}
      when: canary=="start" or canary=="none"

    - name: re-acquire cluster_hosts and cluster_hosts_state
      import_role:
        name: clusterverse/cluster_hosts
      when: canary=="none"

    - name: canary==finish or canary==none
      block:
        - assert: { that: "'retiring' in (cluster_hosts_state | map(attribute='tagslabels.lifecycle_state'))", msg: "ERROR - There are no machines in the 'retiring' state." }

        - name: run pre-delete role
          include_role:
            name: "{{predeleterole}}"
          vars:
            hosts_to_remove: "{{ cluster_hosts_state | json_query(\"[?tagslabels.lifecycle_state=='retiring']\") }}"
          when: predeleterole is defined and predeleterole != ""

        - name: "Run {{mainclusteryml}} to perform readiness steps on new cluster"
          shell: "{{ (argv | join(' ')) | regex_replace('redeploy.yml', mainclusteryml) }} --tags=clusterverse_dynamic_inventory,clusterverse_readiness"
          register: r__mainclusteryml

        - fail:
          when: testfail_2 is defined and testfail_2|bool

        - name: "Run {{mainclusteryml}} to delete retired cluster"
          shell: "{{ (argv | join(' ')) | regex_replace('redeploy.yml', mainclusteryml) }} -e clean=retiring --tags=clusterverse_clean"
          register: r__mainclusteryml

        - debug: msg={{r__mainclusteryml}}
      when: canary=="finish" or canary=="none"

  rescue:
    - debug: msg="Rescuing"

    - name: rescue | re-acquire cluster_hosts and cluster_hosts_state
      import_role:
        name: clusterverse/cluster_hosts

    - name: rescue | Move instances in 'current' state to 'redeployfail' state
      include_tasks: set_lifecycle_state_label.yml
      vars: { old_state: "current", new_state: "redeployfail" }
      when: "'current' in (cluster_hosts_state | map(attribute='tagslabels.lifecycle_state'))  and  'retiring' in (cluster_hosts_state | map(attribute='tagslabels.lifecycle_state'))"

    - name: rescue | re-acquire cluster_hosts and cluster_hosts_state
      import_role:
        name: clusterverse/cluster_hosts

    - name: rescue | Move instances in 'retiring' state back to 'current' state
      include_tasks: set_lifecycle_state_label.yml
      vars: { old_state: "retiring", new_state: "current" }
      when: "'retiring' in (cluster_hosts_state | map(attribute='tagslabels.lifecycle_state'))  and  'current' not in (cluster_hosts_state | map(attribute='tagslabels.lifecycle_state'))"

    - name: rescue | re-acquire cluster_hosts and cluster_hosts_state
      import_role:
        name: clusterverse/cluster_hosts

    - name: "rescue | Run {{mainclusteryml}} to reset DNS"
      shell: "{{ (argv | join(' ')) | regex_replace('redeploy.yml', mainclusteryml) }} --tags=clusterverse_dynamic_inventory,clusterverse_readiness"
      register: r__mainclusteryml

    - name: rescue | run pre-delete role
      include_role:
        name: "{{predeleterole}}"
      vars:
        hosts_to_remove: "{{ cluster_hosts_state | json_query(\"[?tagslabels.lifecycle_state=='redeployfail']\") }}"
      when: predeleterole is defined and predeleterole != ""

    - debug: msg={{r__mainclusteryml}}

    - include_tasks: stop_vms.yml
      when: hosts_to_stop | length
      vars:
        hosts_to_stop: "{{ cluster_hosts_state | json_query(\"[?tagslabels.lifecycle_state=='redeployfail']\") }}"

#    - name: "Run {{mainclusteryml}} to clean failed cluster"
#      shell: "{{ (argv | join(' ')) | regex_replace('redeploy.yml', mainclusteryml) }} -e clean='redeployfail' --tags=clusterverse_clean"
#      register: r__mainclusteryml

#    - debug: msg={{r__mainclusteryml}}
