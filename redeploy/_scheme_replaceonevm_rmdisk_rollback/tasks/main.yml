---

- name: Preflight check
  block:
    - assert: { that: "non_current_hosts | length == 0", msg: "ERROR - All VMs must be in the 'current' lifecycle_state.  Those not [{{non_current_hosts | join(',')}}]"  }
      vars:
        non_current_hosts: "{{ cluster_hosts_state | json_query(\"[?tagslabels.lifecycle_state!='current'].name\") }}"
      when: canary=="start" or canary=="none"

    - assert: { that: "hostname_to_replace is defined", msg: "hostname_to_replace must be defined"  }


- name: Redeploy cluster_host_redeploying; rollback on fail
  block:
    - set_fact:
        cluster_host_redeploying: "{{ cluster_hosts_target | json_query(\"[?hostname=='\"+hostname_to_replace+\"']\") }}"

    - name: Change lifecycle_state label from 'current' to 'retiring'
      import_role:
        name: clusterverse/redeploy/__common
        tasks_from: set_lifecycle_state_label.yml
      vars:
        hosts_to_relabel: "[{{ cluster_host_redeploying }}]"
        new_state: "retiring"
      when: (canary=="start" or canary=="none") and ('retiring' not in (cluster_hosts_state | map(attribute='tagslabels.lifecycle_state')))

    - name: re-acquire cluster_hosts_target and cluster_hosts_state
      import_role:
        name: clusterverse/cluster_hosts


    - name: "Run {{mainclusteryml}} to add {{cluster_host_redeploying.hostname}} to cluster"
      shell: "{{ (argv | join(' ')) | regex_replace('redeploy.yml', mainclusteryml) }} -e cluster_suffix={{cluster_suffix}} -e '{'cluster_hosts_target': [{{cluster_host_redeploying | to_json}}]}'"
      register: r__mainclusteryml
      no_log: True
      ignore_errors: yes
    - debug: msg="{{[r__mainclusteryml.stdout_lines] + [r__mainclusteryml.stderr_lines]}}"
      failed_when: r__mainclusteryml is failed
      when: r__mainclusteryml is failed  or  (debug_nested_log_output is defined and debug_nested_log_output|bool)

    - fail:
      when: testfail is defined and testfail == "fail_1"

    - name: re-acquire cluster_hosts_target and cluster_hosts_state
      import_role:
        name: clusterverse/cluster_hosts

    - name: stop/ remove previous instance
      block:
        - name: run predeleterole role
          include_role:
            name: "{{predeleterole}}"
          when: predeleterole is defined and predeleterole != ""

        - name: Power off old VMs
          include_role:
            name: clusterverse/redeploy/__common
            tasks_from: poweroff_vms.yml
          vars:
            hosts_to_stop: "{{ hosts_to_remove }}"

        - fail:
          when: testfail is defined and testfail == "fail_2"
      vars:
        _root_cluster_host_redeploying: "{{cluster_host_redeploying.hostname | regex_replace('-(?!.*-).*')}}"
        hosts_to_remove: "{{ cluster_hosts_state | to_json | from_json | json_query(\"[?tagslabels.lifecycle_state=='retiring' && starts_with(name, '\" + _root_cluster_host_redeploying + \"')]\") }}"

    - name: re-acquire cluster_hosts_target and cluster_hosts_state (for tidy)
      import_role:
        name: clusterverse/cluster_hosts
      when: (canary_tidy_on_success is defined and canary_tidy_on_success|bool)

  rescue:
    - debug: msg="Rescuing"

    - name: rescue
      include_tasks: rescue.yml

    - name: rescue | end_play to prevent tidying of pre-rescued VMs
      meta: end_play
  when: canary!="tidy"


- name: "Tidy up powered-down, non-current instances.  NOTE: Must do clean_dns first, because both clean_dns and clean_vms have the cluster_hosts role as a dependency, which when run after clean_vms, will be empty."
  block:
    - assert: { that: "'current' in (cluster_hosts_state | map(attribute='tagslabels.lifecycle_state'))", msg: "ERROR - Cannot tidy when there are no machines in the 'current' lifecycle_state.  Please use '-e clean=_all_'." }

    - import_role:
        name: clusterverse/clean
        tasks_from: clean_dns.yml
      when: (hosts_to_clean | length)  and  (cluster_vars.dns_server is defined and cluster_vars.dns_server != "") and (cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != "")

    - import_role:
        name: clusterverse/clean
        tasks_from: clean_vms.yml
      when: (hosts_to_clean | length)

    - debug:
        msg: "tidy | No hosts to tidy.  Only powered-down, non-current machines with be tidied; to clean other machines, please use the '-e clean=<state>' extra variable."
      when: hosts_to_clean | length == 0
  vars:
    hosts_to_clean: "{{ cluster_hosts_state | json_query(\"[?tagslabels.lifecycle_state!='current' && !(contains('RUNNING,running', instance_state))]\") }}"
  when: canary=="tidy" or  ((canary=="none" or canary=="finish") and canary_tidy_on_success is defined and canary_tidy_on_success|bool)
