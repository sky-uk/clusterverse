---

- debug: msg="Stop {{host_to_stop.hostname}}"

- name: gcp_stop | Stop GCE instance
  block:
    - name: Get GCP instance facts
      gcp_compute_instance_info:
        zone: "{{cluster_vars.region}}-{{host_to_stop.hostname | regex_replace('.*-([a-z])[0-9]-.*', '\\1')}}"
        filters:
          - "name = {{host_to_stop.hostname}}*"
        project: "{{cluster_vars.project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        scopes: ["https://www.googleapis.com/auth/compute.readonly"]
      register: gcp_compute_instance_info

    - name: Stop GCE VM and set maintenance_mode to true
      gcp_compute_instance:
        name: "{{host_to_stop.hostname}}"
        project: "{{cluster_vars.project_id}}"
        zone: "{{cluster_vars.region}}-{{host_to_stop.hostname | regex_replace('.*-([a-z])[0-9]-.*', '\\1')}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        deletion_protection: "{{cluster_vars[buildenv].deletion_protection}}"
        status: "TERMINATED"
        labels: "{{ gcp_compute_instance_info.resources[0].labels | combine({'maintenance_mode': true}) }}"
      register: gcp_compute_instance

    - name: Delete DNS A records using nsupdate (if applicable)
      nsupdate:
        key_name: "{{bind9[buildenv].key_name}}"
        key_secret: "{{bind9[buildenv].key_secret}}"
        server: "{{bind9[buildenv].server}}"
        zone: "{{dns_tld_external}}"
        state: "absent"
        record: "{{host_to_stop.hostname}}.{{cluster_vars.dns_zone_external | regex_replace('^(.*?)\\.' + dns_tld_external, '\\1')}}"
      when: cluster_vars.dns_server == "nsupdate" and cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != ""

    - name: Delete DNS entries from route53
      block:
      - name: Get DNS entries from route53
        route53:
          aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
          aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
          state: "get"
          zone: "{{cluster_vars.dns_zone_external}}"
          record: "{{cluster_vars.region}}-{{cluster_hosts_flat  | json_query('[? hostname == `' + host_to_stop.hostname + '`].az_name|[0]')}}"
          type: "A"
        register: dns_rec

      - name: Remove DNS entries from route53
        route53:
          aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
          aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
          state: "absent"
          zone: "{{ dns_rec.set.zone }}"
          record: "{{ dns_rec.set.record }}"
          type: "{{ dns_rec.set.type }}"
          ttl: "{{ dns_rec.set.ttl }}"
          value: ["{{ dns_rec.set.value }}"]
          private_zone: "{{cluster_vars.route53_private_zone | default(true)}}"
        when: dns_rec.set.value is defined
      when: cluster_vars.dns_server == "route53" and cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != ""

    - name: Delete DNS entries from clouddns
      block:
      - name: Gather info for a pre-existing GCP Managed Zone and store as dict
        gcp_dns_managed_zone_info:
          auth_kind: serviceaccount
          dns_name: "{{dns_tld_external}}"
          project: "{{ GOOGLE_PROJECT }}"
          service_account_file: "{{gcp_credentials_file}}"
        register: gcp_dns_managed_zone_info
        become: false
        delegate_to: localhost
        run_once: true
        when: (cluster_vars.dns_server is defined and cluster_vars.dns_server != "") and cluster_vars.dns_server=="clouddns" and (cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != "")
      
      - name: Get DNS entries from clouddns
        gcp_dns_resource_record_set_info:
          auth_kind: serviceaccount
          managed_zone:
            name: "{{gcp_dns_managed_zone_info.resources.0.name}}"
            dnsName: "{{gcp_dns_managed_zone_info.resources.0.dnsName}}"
          project: "{{ GOOGLE_PROJECT }}"
          service_account_file: "{{gcp_credentials_file}}"
        register: gcp_dns_resource_record_set_info

      - name: Remove related clusterverse A records from clouddns only
        gcp_dns_resource_record_set:
          auth_kind: serviceaccount
          managed_zone:
            name: "{{gcp_dns_managed_zone_info.resources.0.name}}"
            dnsName: "{{gcp_dns_managed_zone_info.resources.0.dnsName}}"        
          name: "{{ cluster_hosts_flat | json_query('[? hostname == `' + host_to_stop.hostname + '`].hostname|[0]')}}.{{cluster_vars.dns_zone_external}}"
          project: "{{ GOOGLE_PROJECT }}"
          service_account_file: "{{gcp_credentials_file}}"
          state: absent    
          target: "{{ gcp_dns_resource_record_set_info | json_query('resources[?type == `A`].rrdatas|[]|[0]')}}" 
          type: A
          ttl: "{{ gcp_dns_resource_record_set_info | json_query('resources[?type == `A`].ttl|[]|[0]')}}" 
        become: false
        delegate_to: localhost
        run_once: true
        register: gcp_dns_resource_record_set_2
        when: (cluster_vars.dns_server is defined and cluster_vars.dns_server != "") and cluster_vars.dns_server=="clouddns" and (cluster_vars.dns_zone_external is defined and cluster_vars.dns_zone_external != "")
