#!groovy
import java.security.MessageDigest

String generateMD5(String s, int len = 31) {
  MessageDigest.getInstance("MD5").digest(s.bytes).encodeHex().toString()[0..len] as String
}

pipeline {
  agent any

  //NOTE: As yet, you cannot use variable for the 'value' axis of a matrix build, so parameters aren't very useful.
  parameters {
    choice(name: 'CLOUD_REGION', choices: ['', 'esxifree/dougalab', 'aws/eu-west-1', 'gcp/europe-west1'], description: "Choose a cloud/region")
    gitParameter(name: 'RELEASE', type: 'PT_TAG', defaultValue: 'master', sortMode: 'DESCENDING_SMART', description: "Choose a release to test")
//    string(name: 'APP_NAME', description: "An optional custom app_name to override the default in the playbook")
//    extendedChoice name: 'CLOUD_REGIONS', type: 'PT_MULTI_SELECT', value: 'esxifree/dougalab,aws/eu-west-1,gcp/europe-west1', defaultValue: '', description: 'Specify which cloud/region(s) to test', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, visibleItemCount: 5
//    extendedChoice name: 'BUILDENVS', type: 'PT_MULTI_SELECT', value: 'dev,sandbox', defaultValue: '', description: 'Specify which environment(s) to test', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, visibleItemCount: 5
//    extendedChoice name: 'CLUSTER_IDS', type: 'PT_MULTI_SELECT', value: 'testsuite', defaultValue: '', description: 'Specify which cluster_id(s) to test', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, visibleItemCount: 5
//    booleanParam(name: 'DNS_FORCE_DISABLE_TEST', defaultValue: false, description: 'Tick the box to test DNS on/off')
//    extendedChoice name: 'REDEPLOY_SCHEMES', type: 'PT_MULTI_SELECT', value: '_scheme_addallnew_rmdisk_rollback,_scheme_addnewvm_rmdisk_rollback,_scheme_rmvm_rmdisk_only,_scheme_rmvm_keepdisk_rollback', defaultValue: '', description: 'Specify which redeploy scheme(s) to test', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, visibleItemCount: 5
//    string(name: 'MYHOSTTYPES', description: "comma-separated string, e.g. master,slave - In redeployment you can define which host type you like to redeploy. If not defined it will redeploy all host types")
//    extendedChoice name: 'OS', type: 'PT_MULTI_SELECT', value: 'ubuntu,centos', defaultValue: '', description: 'Specify which OSs to test', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, visibleItemCount: 5
////    extendedChoice bindings: '', description: '', groovyClasspath: '', groovyScript: '''    List<String> artifacts = new ArrayList<String>()
////    artifacts.add("dpstest_aws_euw1")
////    artifacts.add("dpstest_esxi_dougalab")
////    artifacts.add("dpstest_gcp_euw1")
////    return artifacts
////''', multiSelectDelimiter: ',', name: 'group_vars', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_MULTI_SELECT', visibleItemCount: 4
  }

  stages {
    stage('Check Environment') {
      steps {
        script {
          if (params.CLOUD_REGION == '') {
            error "CLOUD_REGION not defined"
          }
        }
      }
    }
    stage('MatrixBuild') {
      matrix {
        axes {
//          axis {
//            name 'CLOUD_REGION'
//            values 'esxifree/dougalab', 'gcp/europe-west1', 'aws/eu-west-1'
//          }
          axis {
            name 'BUILDENV'
            values 'sandbox'
          }
          axis {
            name 'REDEPLOY_SCHEME'
            values '_scheme_addallnew_rmdisk_rollback', '_scheme_addnewvm_rmdisk_rollback', '_scheme_rmvm_rmdisk_only', '_scheme_rmvm_keepdisk_rollback'
          }
          axis {
            name 'DNS_FORCE_DISABLE'
            values false, true
          }
          axis {
            name 'CLUSTER_ID'
            values 'testsuite'
          }
          axis {
            name 'MYHOSTTYPES'
            values ''
          }
        }
        excludes {
          exclude {
            axis {
              name 'DNS_FORCE_DISABLE'
              values true
            }
            axis {
              name 'CLOUD_REGION'
              values 'esxifree/dougalab'
            }
          }
          exclude {
            axis {
              name 'MYHOSTTYPES'
              notValues ''
            }
            axis {
              name 'REDEPLOY_SCHEME'
              values '_scheme_addallnew_rmdisk_rollback'
            }
          }
        }
        environment {
          //Setting this here to mimic matrix behaviour in case (https://issues.jenkins.io/browse/JENKINS-37984) gets fixed.  We cannot run all clouds simultaneously in one matrix - get "java.lang.RuntimeException: Method code too large!"
          CLOUD_REGION = "${params.CLOUD_REGION}"
          VAULT_PASSWORD_BUILDENV = credentials("VAULT_PASSWORD_${env.BUILDENV.toUpperCase()}")
          BUILD_HASH = generateMD5("${env.CLOUD_REGION} ${env.BUILDENV} ${env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : ''} ${env.DNS_FORCE_DISABLE} ${env.CLUSTER_ID} ${env.MYHOSTTYPES ? env.MYHOSTTYPES : ''}", 12)
//          BUILD_COMBINATION = "CLOUD_REGION:${env.CLOUD_REGION} BUILDENV:${env.BUILDENV} REDEPLOY_SCHEME:${env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : ''} DNS_FORCE_DISABLE:${DNS_FORCE_DISABLE} CLUSTER_ID:${env.CLUSTER_ID} MYHOSTTYPES:${env.MYHOSTTYPES ? env.MYHOSTTYPES : ''}"
        }
        stages {
          stage('Init') {
            steps {
              sh 'printenv | sort'
              echo "BUILD_HASH = ${env.BUILD_HASH}"
              echo "BUILD_COMBINATION = CLOUD_REGION:${env.CLOUD_REGION} BUILDENV:${env.BUILDENV} REDEPLOY_SCHEME:${env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : ''} DNS_FORCE_DISABLE:${DNS_FORCE_DISABLE} CLUSTER_ID:${env.CLUSTER_ID} MYHOSTTYPES:${env.MYHOSTTYPES ? env.MYHOSTTYPES : ''}"
            }
          }
          stage('deploy') {
            steps {
              sh 'printenv | sort'
              build job: 'clusterverse-deploy', parameters: [string(name: 'APP_NAME', value: "cvtest-${BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'deploy'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
            }
          }
          stage('redeploy canary=start,finish,tidy') {
            steps {
              sh 'printenv | sort'
              build job: 'clusterverse-deploy', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'start'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: false), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
              build job: 'clusterverse-deploy', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'finish'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: false), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
              build job: 'clusterverse-deploy', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'tidy'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: false), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
            }
          }
          stage('redeploy canary=none (tidy_on_success)') {
            steps {
              sh 'printenv | sort'
              build job: 'clusterverse-deploy', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
            }
          }
          stage('deploy on top') {
            steps {
              sh 'printenv | sort'
              build job: 'clusterverse-deploy', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'deploy'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
            }
          }
          stage('clean') {
            steps {
              sh 'printenv | sort'
              build job: 'clusterverse-deploy', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'clean'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
            }
          }
        }
      }
    }
  }
}