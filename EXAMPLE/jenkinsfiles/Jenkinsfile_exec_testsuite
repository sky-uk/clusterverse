#!groovy
import java.security.MessageDigest

String generateMD5(String s, int len = 31) {
  MessageDigest.getInstance("MD5").digest(s.bytes).encodeHex().toString()[0..len] as String
}

//@interface NonCPS {}

class MatrixBuilder {
  HashMap jenkinsParams
  HashMap matrixParams
  Closure fnJenkinsParamsMutate
  Closure fnMatrixAxesFilter

  // Note: No constructor.  It is created automatically, and instance variables and getters/setters are created that map to the Map that is passed with the instantiation.  You can't do a lot of work in a Jenkins Groovy constructor anyway because of CPS (https://www.jenkins.io/doc/book/pipeline/cps-method-mismatches/)

  List getMatrixAxes() {
    this.matrixParams = Eval.me(jenkinsParams.inspect())
    this.matrixParams = this.fnJenkinsParamsMutate ? this.fnJenkinsParamsMutate(this.matrixParams) : this.matrixParams
    this.matrixParams = this.matrixParams.each { key, choice -> this.matrixParams.put(key, (choice instanceof String) ? choice.split(',') : choice) }          //this.matrixParams.each { param -> param.value = (param.value instanceof String) ? param.value.split(',') : param.value }     //NOTE: Doesn't work: https://www.jenkins.io/doc/book/pipeline/cps-method-mismatches/

    List allCombinations = this.getAxesCombinations()
    return allCombinations.findAll(this.fnMatrixAxesFilter)
  }

  @NonCPS
  private List getAxesCombinations() {
    List axes = []
    this.matrixParams.each { axis, values ->
      List axisList = []
      values.each { value ->
        axisList << [(axis): value]
      }
      axes << axisList
    }
    axes.combinations()*.sum()    // calculates the cartesian product
  }
}

properties([
    //disableConcurrentBuilds(),
    //pipelineTriggers([pollSCM(ignorePostCommitHooks: true, scmpoll_spec: '''H/30 8-19 * * 1-5''')]),
    parameters([
        extendedChoice(name: 'CLOUD_REGION', type: 'PT_MULTI_SELECT', value: 'esxifree/dougalab,aws/eu-west-1,gcp/europe-west1', description: 'Specify which cloud/region(s) to test', multiSelectDelimiter: ',', visibleItemCount: 5),
        choice(name: 'BUILDENV', choices: ['', 'sandbox'], description: "The environment in which to run the tests"),
        string(name: 'CLUSTER_ID', defaultValue: 'testsuite', trim: true),
        choice(name: 'DNS_TEST', choices: ['as_defined', 'force_disable', 'both'], description: "Whether to test with DNS as defined in cluster definitions (as_defined), or to force to disable (force_disable), or both"),
        extendedChoice(name: 'REDEPLOY_SCHEME', type: 'PT_CHECKBOX', value: '_scheme_addallnew_rmdisk_rollback,_scheme_addnewvm_rmdisk_rollback,_scheme_rmvm_rmdisk_only,_scheme_rmvm_keepdisk_rollback', defaultValue: '_scheme_addallnew_rmdisk_rollback,_scheme_addnewvm_rmdisk_rollback,_scheme_rmvm_rmdisk_only,_scheme_rmvm_keepdisk_rollback', description: 'Specify which redeploy scheme(s) to test', multiSelectDelimiter: ',', visibleItemCount: 5),
        choice(name: 'MYHOSTTYPES_TEST', choices: ['false', 'true'], description: "!!NOT ENABLED YET!! Run tests on pre-configured hosttypes.  Hosttype definitions \"sys\" and \"sysdisks2\" must exist in cluster_vars for all clusters."),
        choice(name: 'CLEAN_ON_FAILURE', choices: [true, false], description: "Run a clusterverse clean in the event of a failure."),
    ])
])

//def params = [BUILDENV: 'sandbox', DNS_TEST: 'both', REDEPLOY_SCHEME: '_scheme_rmvm_rmdisk_only,_scheme_rmvm_keepdisk_rollback', MYHOSTTYPES: true, CLUSTER_ID: 'testsuite', CLOUD_REGION: 'esxifree/dougalab,aws/eu-west-1,gcp/europe-west1']

Test1 = new MatrixBuilder(jenkinsParams: params,
    fnJenkinsParamsMutate: { jenkinsParams ->
      switch (jenkinsParams['DNS_TEST']) {
        case 'as_defined':
          jenkinsParams.put('DNS_FORCE_DISABLE', ['false'])
          break;
        case 'force_disable':
          jenkinsParams.put('DNS_FORCE_DISABLE', ['true'])
          break;
        case 'both':
          jenkinsParams.put('DNS_FORCE_DISABLE', ['true', 'false'])
          break;
      }
      jenkinsParams.remove('DNS_TEST')
      return jenkinsParams
    },
    fnMatrixAxesFilter: { axis ->
      !(axis['DNS_FORCE_DISABLE'] == 'true' && axis['CLOUD_REGION'] == 'esxifree/dougalab') &&
          !(axis['REDEPLOY_SCHEME'] == '_scheme_addallnew_rmdisk_rollback' && axis['MYHOSTTYPES'] == 'true')
    }
)

println(Test1.getMatrixAxes().inspect())
println(Test1.getMatrixParams().inspect())


// parallel task map
Map tasks = [failFast: false]

for (int i = 0; i < Test1.getMatrixAxes().size(); i++) {
  // convert the Axis into valid values for withEnv step
  Map axis = Test1.getMatrixAxes()[i]
  List axisEnv = []
  axis.each { key, val ->
    axisEnv.add("${key}=${val}")
  }
  axisEnv.add("BUILD_HASH=" + generateMD5(axisEnv.join(','), 12))
  tasks[axisEnv.join(', ')] = { ->
    node {
      withEnv(axisEnv) {
        withCredentials([string(credentialsId: "VAULT_PASSWORD_${env.BUILDENV.toUpperCase()}", variable: 'VAULT_PASSWORD_BUILDENV')]) { env.VAULT_PASSWORD_BUILDENV = VAULT_PASSWORD_BUILDENV }
        stage('deploy') {
          try {
            echo "${axisEnv}"
            build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'deploy'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
          } catch (Exception err) {
            if (params.CLEAN_ON_FAILURE) {
              echo "Running clean-up on cluster"
              build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'clean'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
            }
            currentBuild.result = 'FAILURE'
            error "Stage error:\n" + err
          }
        }
        stage('redeploy canary=start,finish,tidy') {
          try {
            echo "${axisEnv}"
            build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'start'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: false), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
            build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'finish'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: false), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
            build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'tidy'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: false), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
          } catch (Exception err) {
            if (params.CLEAN_ON_FAILURE) {
              echo "Running clean-up on cluster"
              build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'clean'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
            }
            currentBuild.result = 'FAILURE'
            error "Stage error:\n" + err
          }
        }
        stage('redeploy canary=none (tidy_on_success)') {
          try {
            echo "${axisEnv}"
            build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
          } catch (Exception err) {
            if (params.CLEAN_ON_FAILURE) {
              echo "Running clean-up on cluster"
              build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'clean'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
            }
            currentBuild.result = 'FAILURE'
            error "Stage error:\n" + err
          }
        }
        stage('deploy on top') {
          try {
            echo "${axisEnv}"
            build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'deploy'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
          } catch (Exception err) {
            if (params.CLEAN_ON_FAILURE) {
              echo "Running clean-up on cluster"
              build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'clean'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
            }
            currentBuild.result = 'FAILURE'
            error "Stage error:\n" + err
          }
        }
        stage('clean') {
          echo "${axisEnv}"
          catchError {
            build job: 'clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'clean'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
          }
        }
      }
    }
  }
}

stage('Check Environment') {
  node {
    echo "${params}"
    if (params.BUILDENV == '') {
      error "BUILDENV not defined"
    }
  }
}

stage("Matrix builds") {
  parallel(tasks)
}
