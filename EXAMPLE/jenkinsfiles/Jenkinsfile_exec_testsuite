#!groovy

// This class encapsulates the logic of creating a list of parallel jobs from a matrix of job combinations.
// It re-implements the declarative matrix (https://www.jenkins.io/blog/2019/11/22/welcome-to-the-matrix/) in Groovy, because the declarative matrix is limited, and it cannot cope with the combinatorial explosion.
// It takes some inspiration from this blog: https://www.jenkins.io/blog/2019/12/02/matrix-building-with-scripted-pipeline/
class MatrixBuilder {
  private HashMap jenkinsParams
  private HashMap _matrixParams  //This cannot be made into a Closure due to CPS (again).  (https://www.jenkins.io/doc/book/pipeline/cps-method-mismatches/)
  private Closure clJenkinsParamsMutate
  private Closure clMatrixAxesFilter
  private Closure clTaskMap

  // NOTE: No constructor.  When undeclared, constructors are created automatically, creating instance variables and getters/setters that correspond to the Map that is passed with the instantiation.  You can't do a lot of work in a Jenkins Groovy constructor anyway because of CPS (https://www.jenkins.io/doc/book/pipeline/cps-method-mismatches/)

  public Map getTaskMap() {
    HashMap tasks = [failFast: false]
    _getMatrixAxes().each() { axis ->
      List axisEnvVars = axis.collect { key, val -> "${key}=${val}" }
      axisEnvVars.add("BUILD_HASH=" + generateMD5(axisEnvVars.join(','), 12))
      tasks[axisEnvVars.join(', ')] = { this.clTaskMap(axisEnvVars) }
    }
    return (tasks)
  }

  private List _getMatrixAxes() {
    this._getMatrixParams()
    List allCombinations = this._getAxesCombinations()
    return (this.clMatrixAxesFilter ? allCombinations.findAll(this.clMatrixAxesFilter) : allCombinations)
  }

  private HashMap _getMatrixParams() {
    HashMap newMatrixParams = Eval.me(this.jenkinsParams.inspect())
    newMatrixParams = this.clJenkinsParamsMutate ? this.clJenkinsParamsMutate(newMatrixParams) : newMatrixParams
    newMatrixParams = newMatrixParams.each { key, choice -> newMatrixParams.put(key, (choice instanceof String) ? choice.split(',') : choice.toString()) }      //newMatrixParams().each { param -> param.value = (param.value instanceof String) ? param.value.split(',') : param.value }     //NOTE: Doesn't work: https://www.jenkins.io/doc/book/pipeline/cps-method-mismatches/
    this._matrixParams = newMatrixParams
    return (newMatrixParams)
  }

  @NonCPS
  private List _getAxesCombinations() {
    List axes = []
    this._matrixParams.each { axis, values ->
      List axisList = []
      values.each { value ->
        axisList << [(axis): value]
      }
      axes << axisList
    }
    axes.combinations()*.sum()    // calculates the cartesian product
  }

  static String generateMD5(String s, int len = 31) {
    java.security.MessageDigest.getInstance("MD5").digest(s.bytes).encodeHex().toString()[0..len]
  }
}

// A class to hold the status of each stage, so we can fail a stage and be able to run the clean at the end if needed
class cStageBuild { public String result='SUCCESS' }

// A 'stage' template for clusterverse boilerplace
def stage_cvops(String stageLabel, cStageBuild stageBuild, Closure stageExpressions) {
  stage(stageLabel) {
    if (stageBuild.result == 'SUCCESS') {
      try {
        stageExpressions()
      } catch (Exception err) {
        currentBuild.result = 'FAILURE'
        stageBuild.result = 'FAILURE'
        unstable('Stage failed!')       // OR:  'error "Stage failure"' or 'throw new org.jenkinsci.plugins.workflow.steps.FlowInterruptedException(hudson.model.Result.FAILURE)', but both of these fail all future stages, preventing us calling the clean.
      }
    }
  }
}


properties([
    //disableConcurrentBuilds(),
    //pipelineTriggers([pollSCM(ignorePostCommitHooks: true, scmpoll_spec: '''H/30 8-19 * * 1-5''')]),
    parameters([
        extendedChoice(name: 'CLOUD_REGION', type: 'PT_MULTI_SELECT', value: 'esxifree/dougalab,aws/eu-west-1,gcp/europe-west1', description: 'Specify which cloud/region(s) to test', multiSelectDelimiter: ',', visibleItemCount: 5),
        choice(name: 'BUILDENV', choices: ['', 'sandbox'], description: "The environment in which to run the tests"),
        string(name: 'CLUSTER_ID', defaultValue: 'testsuite', trim: true),
        choice(name: 'DNS_TEST', choices: ['as_defined', 'force_disable', 'both'], description: "Whether to test with DNS as defined in cluster definitions (as_defined), or to force to disable (force_disable), or both"),
        extendedChoice(name: 'REDEPLOY_SCHEME', type: 'PT_CHECKBOX', value: '_scheme_addallnew_rmdisk_rollback,_scheme_addnewvm_rmdisk_rollback,_scheme_rmvm_rmdisk_only,_scheme_rmvm_keepdisk_rollback', defaultValue: '_scheme_addallnew_rmdisk_rollback,_scheme_addnewvm_rmdisk_rollback,_scheme_rmvm_rmdisk_only,_scheme_rmvm_keepdisk_rollback', description: 'Specify which redeploy scheme(s) to test', multiSelectDelimiter: ',', visibleItemCount: 5),
        choice(name: 'MYHOSTTYPES_TEST', choices: ['false', 'true'], description: "!!NOT ENABLED YET!! Run tests on pre-configured hosttypes.  Hosttype definitions \"sys\" and \"sysdisks2\" must exist in cluster_vars for all clusters."),
        choice(name: 'CLEAN_ON_FAILURE', choices: [true, false], description: "Run a clusterverse clean in the event of a failure."),
    ])
])

//def params = ['BUILDENV': 'sandbox', 'DNS_TEST': 'both', 'MYHOSTTYPES_TEST': 'false', 'REDEPLOY_SCHEME': '_scheme_addallnew_rmdisk_rollback,_scheme_addnewvm_rmdisk_rollback,_scheme_rmvm_rmdisk_only,_scheme_rmvm_keepdisk_rollback', 'CLEAN_ON_FAILURE': 'true', 'CLUSTER_ID': 'testsuite', 'CLOUD_REGION': 'esxifree/dougalab,aws/eu-west-1,gcp/europe-west1']

println("User-supplied 'params': \n" + params.inspect() + "\n")


/*******************************************/
/*** Below are all the matrix parameters ***/
/*******************************************/

//The matrix parameter generation
SELFTEST = new MatrixBuilder([
    jenkinsParams        : params,
    clJenkinsParamsMutate: { jenkinsParams ->
      if (jenkinsParams['DNS_TEST'] == 'as_defined') jenkinsParams.put('DNS_FORCE_DISABLE', 'false')
      else if (jenkinsParams['DNS_TEST'] == 'force_disable') jenkinsParams.put('DNS_FORCE_DISABLE', 'true')
      else if (jenkinsParams['DNS_TEST'] == 'both') jenkinsParams.put('DNS_FORCE_DISABLE', 'true,false')
      jenkinsParams.remove('DNS_TEST')
      jenkinsParams.remove('MYHOSTTYPES_TEST')
      jenkinsParams.remove('CLEAN_ON_FAILURE')
      return jenkinsParams
    },
    clMatrixAxesFilter   : { axis ->
      !(axis['DNS_FORCE_DISABLE'] == 'true' && axis['CLOUD_REGION'] == 'esxifree/dougalab') &&
      !(axis['REDEPLOY_SCHEME'] == '_scheme_addallnew_rmdisk_rollback' && axis['MYHOSTTYPES'] == 'true')
    },
    clTaskMap            : { axisEnvVars ->
      node {
        withEnv(axisEnvVars) {
          withCredentials([string(credentialsId: "VAULT_PASSWORD_${env.BUILDENV.toUpperCase()}", variable: 'VAULT_PASSWORD_BUILDENV')]) {
            env.VAULT_PASSWORD_BUILDENV = VAULT_PASSWORD_BUILDENV
          }
          def stageBuild = new cStageBuild([result: 'SUCCESS'])

          stage_cvops('deploy', stageBuild, {
            echo "deploy"
          })

          stage_cvops('redeploy', stageBuild, {
            echo "redeploy"
            //Test that script can fail individual stages (1 in 4 should fail)
            def x = Math.abs(new Random().nextInt() % 4) + 1
            if (x == 1) throw new IllegalStateException("Test failed stage")
          })

          stage_cvops('deploy', stageBuild, {
            echo "deploy on top"
          })
        }
      }
    }
])


//The matrix parameter generation
CVTEST1 = new MatrixBuilder([
    jenkinsParams        : params,
    clJenkinsParamsMutate: { jenkinsParams ->
      if (jenkinsParams['DNS_TEST'] == 'as_defined') jenkinsParams.put('DNS_FORCE_DISABLE', 'false')
      else if (jenkinsParams['DNS_TEST'] == 'force_disable') jenkinsParams.put('DNS_FORCE_DISABLE', 'true')
      else if (jenkinsParams['DNS_TEST'] == 'both') jenkinsParams.put('DNS_FORCE_DISABLE', 'true,false')
      jenkinsParams.remove('DNS_TEST')
      jenkinsParams.remove('MYHOSTTYPES_TEST')
      jenkinsParams.remove('CLEAN_ON_FAILURE')
      return jenkinsParams
    },
    clMatrixAxesFilter   : { axis ->
      !(axis['DNS_FORCE_DISABLE'] == 'true' && axis['CLOUD_REGION'] == 'esxifree/dougalab') &&
      !(axis['REDEPLOY_SCHEME'] == '_scheme_addallnew_rmdisk_rollback' && axis['MYHOSTTYPES'] == 'true')
    },
    clTaskMap            : { axisEnvVars ->
      node {
        withEnv(axisEnvVars) {
          withCredentials([string(credentialsId: "VAULT_PASSWORD_${env.BUILDENV.toUpperCase()}", variable: 'VAULT_PASSWORD_BUILDENV')]) {
            env.VAULT_PASSWORD_BUILDENV = VAULT_PASSWORD_BUILDENV
          }
          def stageBuild = new cStageBuild([result: 'SUCCESS'])

          stage_cvops('deploy', stageBuild, {
            build job: 'clusterverse/clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'deploy'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
          })

          stage_cvops('redeploy canary=start', stageBuild, {
            build job: 'clusterverse/clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'start'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: false), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
          })

          stage_cvops('redeploy canary=finish', stageBuild, {
            build job: 'clusterverse/clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'finish'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: false), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
          })

          stage_cvops('redeploy canary=tidy', stageBuild, {
            build job: 'clusterverse/clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'tidy'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: false), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
          })

          stage_cvops('redeploy canary=none (tidy_on_success)', stageBuild, {
            build job: 'clusterverse/clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'redeploy'), string(name: 'REDEPLOY_SCHEME', value: (env.REDEPLOY_SCHEME ? env.REDEPLOY_SCHEME : '')), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: (env.MYHOSTTYPES ? env.MYHOSTTYPES : '')), gitParameter(name: 'RELEASE', value: 'master')]
          })

          stage_cvops('deploy on top', stageBuild, {
            build job: 'clusterverse/clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'deploy'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
          })

          stage('clean') {
            if (stageBuild.result == 'SUCCESS' || params.CLEAN_ON_FAILURE) {
              if (stageBuild.result != 'SUCCESS') echo "Stage failure: Running clean-up on cluster..."
              catchError {
                build job: 'clusterverse/clusterverse-ops', parameters: [string(name: 'APP_NAME', value: "cvtest-${env.BUILD_NUMBER}-${env.BUILD_HASH}"), booleanParam(name: 'APPEND_BUILD_NUMBER', value: false), string(name: 'CLOUD_REGION', value: env.CLOUD_REGION), string(name: 'BUILDENV', value: env.BUILDENV), string(name: 'CLUSTER_ID', value: env.CLUSTER_ID), booleanParam(name: 'DNS_FORCE_DISABLE', value: env.DNS_FORCE_DISABLE), string(name: 'DEPLOY_TYPE', value: 'clean'), string(name: 'REDEPLOY_SCHEME', value: ''), string(name: 'CANARY', value: 'none'), booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', value: true), string(name: 'MYHOSTTYPES', value: ''), gitParameter(name: 'RELEASE', value: 'master')]
              }
            }
          }
        }
      }
    }
])



/*******************************************/
/*** Below are all the stage definitions ***/
/*******************************************/

stage('Check Environment') {
  node {
    echo "${params}"
    if (params.BUILDENV == '') {
      error "BUILDENV not defined"
    }
  }
}

//stage("SELFTEST Matrix builds") {
//  echo("Matrix 'params' used to build Matrix axes: \n" + SELFTEST._getMatrixParams().inspect() + "\n")
//  echo("Matrix axes: \n" + SELFTEST._getMatrixAxes().inspect() + "\n")
//  parallel(SELFTEST.getTaskMap())
//}

stage("CVTEST1 Matrix builds") {
  echo("Matrix 'params' used to build Matrix axes: \n" + CVTEST1._getMatrixParams().inspect() + "\n")
  echo("Matrix axes: \n" + CVTEST1._getMatrixAxes().inspect() + "\n")
  parallel(CVTEST1.getTaskMap())
}
