#!groovy
import groovy.json.JsonOutput

String[] common_deploy_vars(params = null) {
  println("common_deploy_vars params:" + params)

  String IAC_RELEASE = ""
  if (params.RELEASE != "master" && params.RELEASE != null) {
    GIT_TOKEN = credentials("GITHUB_SVC_USER")
    sh "git remote set-url origin https://${GIT_TOKEN_USR}:${GIT_TOKEN_PSW}@github.com/dseeley/clusterverse.git"
    sh "git fetch --tags"
    sh "git checkout ${params.RELEASE}"
    IAC_RELEASE = ' -e release_version=' + params.RELEASE.replace('.', '_') as String
  }

  String DNS_FORCE_DISABLE = ""
  if (params.DNS_FORCE_DISABLE == true && params.DNS_FORCE_DISABLE != null) {
    DNS_FORCE_DISABLE = " -e _dns_nameserver_zone=''"
  }

  String MYHOSTTYPES = ""
  if (params.MYHOSTTYPES != "" && params.MYHOSTTYPES != null) {
    MYHOSTTYPES = ' -e myhosttypes=' + params.MYHOSTTYPES
  }

  String APP_NAME = ""
  if (params.APP_NAME != "" && params.APP_NAME != null) {
    APP_NAME = " -e app_name=" + params.APP_NAME
    if (params.APPEND_BUILD_NUMBER == true) {
      APP_NAME = APP_NAME + '-' + env.BUILD_NUMBER
    }
  }

  def (CLOUD_TYPE, REGION) = params.CLOUD_REGION.split('/')
  return [APP_NAME, DNS_FORCE_DISABLE, IAC_RELEASE, MYHOSTTYPES, CLOUD_TYPE, REGION]
}

pipeline {
  agent { docker { image 'ubuntu_python' } }
  parameters {
    string(name: 'APP_NAME', description: "An optional custom app_name to override the default in the playbook")
    booleanParam(name: 'APPEND_BUILD_NUMBER', defaultValue: false, description: 'Tick the box to append the Jenkins BUILD_NUMBER to APP_NAME')
    choice(name: 'CLOUD_REGION', choices: ['esxifree/dougalab', 'aws/eu-west-1', 'gcp/europe-west1'], description: "Choose a cloud/region")
    choice(name: 'BUILDENV', choices: ['sandbox', 'dev', 'stage', 'prod'], description: "Choose an environment to deploy")
    choice(name: 'CLUSTER_ID', choices: ['', 'testsuite'], description: "Select a cluster_id to deploy")
    booleanParam(name: 'DNS_FORCE_DISABLE', defaultValue: false, description: 'Tick the box to force disable the DNS as defined in playbook')
    choice(name: 'DEPLOY_TYPE', choices: ['deploy', 'redeploy', 'clean'], description: "Choose the deploy type")
    choice(name: 'REDEPLOY_SCHEME', choices: ['', '_scheme_addallnew_rmdisk_rollback', '_scheme_addnewvm_rmdisk_rollback', '_scheme_rmvm_rmdisk_only', '_scheme_rmvm_keepdisk_rollback'], description: "Choose the redeploy schemes")
    choice(name: 'CANARY', choices: ['none', 'start', 'finish', 'tidy'], description: "Choose the canary type")
    booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', defaultValue: false, description: 'Tick the box to tidy up successful canary (none or finish) redeploys (by default, old machines are left powered off)')
    string(name: 'MYHOSTTYPES', description: "comma-separated string, e.g. master,slave - In redeployment you can define which host type you like to redeploy. If not defined it will redeploy all host types")
    gitParameter(name: 'RELEASE', type: 'PT_TAG', defaultValue: 'master', sortMode: 'DESCENDING_SMART', description: "Choose a version to deploy")
  }
  environment {
    VAULT_PASSWORD_BUILDENV = credentials("VAULT_PASSWORD_${params.BUILDENV.toUpperCase()}")
  }

  stages {
    stage('Check Environment') {
      steps {
        sh 'printenv | sort'

        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'WipeWorkspace']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'GITHUB_SVC_USER', url: 'https://github.com/dseeley/clusterverse_test']]]

        script {
          if (params.CLUSTER_ID == '') {
            error "CLUSTER_ID not defined"
          }
          if (params.APPEND_BUILD_NUMBER == true && params.APP_NAME == "") {
            error "APP_NAME is required when APPEND_BUILD_NUMBER is set."
          }
        }
      }
    }
    stage('deploy') {
      when { expression { params.DEPLOY_TYPE == 'deploy' } }
      steps {
        script {
          def (APP_NAME, DNS_FORCE_DISABLE, IAC_RELEASE, MYHOSTTYPES, CLOUD_TYPE, REGION) = common_deploy_vars(params)
          withCredentials([sshUserPrivateKey(credentialsId: "SSH_KEY_${CLOUD_TYPE.toUpperCase()}_${REGION.toUpperCase()}_${params.BUILDENV.toUpperCase()}", keyFileVariable: 'keyfile', usernameVariable: 'sshuser')]) {
            sh "ansible-playbook -u ${sshuser} --private-key=${keyfile} -e cloud_type=${CLOUD_TYPE} -e region=${REGION} -e buildenv=${params.BUILDENV} -e clusterid=${params.CLUSTER_ID} --vault-id=default@.vaultpass-client.py --vault-id=${params.BUILDENV}@.vaultpass-client.py cluster.yml $APP_NAME $DNS_FORCE_DISABLE $MYHOSTTYPES $IAC_RELEASE"
          }
        }
      }
    }
    stage('redeploy') {
      when { expression { params.DEPLOY_TYPE == 'redeploy' } }
      steps {
        script {
          if (params.REDEPLOY_SCHEME == '') {
            error "REDEPLOY_SCHEME not defined"
          }
          def (APP_NAME, DNS_FORCE_DISABLE, IAC_RELEASE, MYHOSTTYPES, CLOUD_TYPE, REGION) = common_deploy_vars(params)
          withCredentials([sshUserPrivateKey(credentialsId: "SSH_KEY_${CLOUD_TYPE.toUpperCase()}_${REGION.toUpperCase()}_${params.BUILDENV.toUpperCase()}", keyFileVariable: 'keyfile', usernameVariable: 'sshuser')]) {
            sh "ansible-playbook -u ${sshuser} --private-key=${keyfile} -e cloud_type=${CLOUD_TYPE} -e region=${REGION} -e buildenv=${params.BUILDENV} -e clusterid=${params.CLUSTER_ID} --vault-id=default@.vaultpass-client.py --vault-id=${params.BUILDENV}@.vaultpass-client.py redeploy.yml -e canary=${params.CANARY} -e canary_tidy_on_success=${params.CANARY_TIDY_ON_SUCCESS} -e redeploy_scheme=${params.REDEPLOY_SCHEME} -e debug_nested_log_output=true $APP_NAME $DNS_FORCE_DISABLE $MYHOSTTYPES $IAC_RELEASE"
          }
        }
      }
    }
    stage('clean') {
      when { expression { params.DEPLOY_TYPE == 'clean' } }
      steps {
        script {
          def (APP_NAME, DNS_FORCE_DISABLE, IAC_RELEASE, MYHOSTTYPES, CLOUD_TYPE, REGION) = common_deploy_vars(params)
          withCredentials([sshUserPrivateKey(credentialsId: "SSH_KEY_${CLOUD_TYPE.toUpperCase()}_${REGION.toUpperCase()}_${params.BUILDENV.toUpperCase()}", keyFileVariable: 'keyfile', usernameVariable: 'sshuser')]) {
            sh "ansible-playbook -u ${sshuser} --private-key=${keyfile} -e cloud_type=${CLOUD_TYPE} -e region=${REGION} -e buildenv=${params.BUILDENV} -e clusterid=${params.CLUSTER_ID} --vault-id=default@.vaultpass-client.py --vault-id=${params.BUILDENV}@.vaultpass-client.py cluster.yml --tags=clusterverse_clean -e clean=_all_ $APP_NAME"
          }
        }
      }
    }
  }
}