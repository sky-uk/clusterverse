#!groovy
import groovy.json.JsonOutput

def VERSION_TO_DEPLOY = ''

pipeline {
  agent any
  parameters {
    string(name: 'NEW_VERSION', defaultValue:"version", description: "Specify the version to be created eg: v1.0.0")
  }
  triggers {
      cron('0 9-16/1 * * 1-5')
  }  
  stages {
    stage('Create Release') {
      environment {
        NEW_VERSION="${params.NEW_VERSION}"
        GIT_TOKEN = credentials("GITHUB_SVC_USER")
      }         
      steps {
        script {
          def apiUrl = "https://api.github.com/repos/sky-uk/clusterverse/releases"
          def latestReleaseQuery = sh(returnStdout: true, script: "curl -s -H \"Authorization: Token ${env.GIT_TOKEN_PSW}\" -H \"Accept: application/json\" -H \"Content-type: application/json\" -X GET ${apiUrl}/latest").trim()
          def latestRelease = readJSON text: "${latestReleaseQuery}"
          if (NEW_VERSION == "version") {
            String version=latestRelease.tag_name
            String minor=version.substring(version.lastIndexOf('.')+1)
            int m=minor.toInteger()+1
            int index=version.lastIndexOf('.')+1
            String major=version.substring(0,version.lastIndexOf('.')+1)
            NEW_VERSION = "${major}${m}"
          }          
          def body = sh(returnStdout: true, script: "git log ${latestRelease.tag_name}..HEAD --pretty=format:\"<li> %H - %s</li>\"").trim()
          if (body != "") {
            def payload = JsonOutput.toJson(["tag_name": "${NEW_VERSION}", "name": "${NEW_VERSION}", "body": "${body}"])
            def response = sh(returnStdout: true, script: "curl -s -H \"Authorization: Token ${env.GIT_TOKEN_PSW}\" -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d '${payload}' ${apiUrl}").trim()
            echo "${NEW_VERSION} is now created"
            VERSION_TO_DEPLOY = "${NEW_VERSION}"
          } else {
              error "No change since last release"
          }
        }
      }
    }
    // Uncomment the stage below as to trigger a downstream deployment job.
    // stage('Trigger deploy') {
    //   steps {
    //     script {
    //       println "Release ${VERSION_TO_DEPLOY} is being deployed in sandbox"
    //       build job: "clusterverse-release-deploy", wait: false, parameters: [string(name: 'GENUINE_BUILD', value: "true"), string(name: 'DEPLOY_ENV', value: "sandbox"), string(name: 'RELEASE', value: "${VERSION_TO_DEPLOY}")]
    //     }
    //   }
    // }        
  }
}
