---
# Openstack and Google Cloud credentials lookup
os_username: "{{ lookup('env','OS_USERNAME') }}"
os_password: "{{ lookup('env','OS_PASSWORD') }}"
gcp_credentials_file: "{{ lookup('env','GCP_CREDENTIALS') | default('/dev/null', true) }}"
gcp_credentials_json: "{{ lookup('file', gcp_credentials_file) | default({'project_id': 'GCP_CREDENTIALS__NOT_SET','client_email': 'GCP_CREDENTIALS__NOT_SET'}, true) }}"


cluster_vars:
  aws_eu_west_1:
    type: aws
#    image: "ami-3548444c"           #CentOS Linux 7 x86_64 HVM EBS ENA 1805_01-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-77ec9308.4
#    image: "ami-00b36349b3dba2ec3"  #ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20181012
    image: "ami-0aebeb281fdee5054"  #ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-20181012
    region: "eu-west-1"
    dns_zone_internal: "eu-west-1.compute.internal"
    dns_zone_external: "{%- if dns_tld_external -%} aws_euw1.{{app_class}}.{{buildenv}}.{{dns_tld_external}} {%- endif -%}"
    dns_server: "nsupdate"    # Specify DNS server. nsupdate, route53, infoblox or openstack (on openstack) supported.  If empty string is specified, no DNS will be added.
    assign_public_ip: "no"
    inventory_ip: "private"   # 'public' or 'private', (private in case we're operating in a private LAN).  If public, 'assign_public_ip' must be 'yes'
    instance_profile_name: "vpc_lock_{{buildenv}}"
    secgroups_existing: []
    secgroup_new:
      - proto: "tcp"
        ports: [22]
        cidr_ip: 10.0.0.0/8
        rule_desc: "SSH Access"
      - proto: "tcp"
        ports: ["{{prometheus_node_exporter_port}}"]
        group_name: ["{{buildenv}}-private-sg"]
        rule_desc: "Prometheus instances attached to {{buildenv}}-private-sg can access the exporter port(s)."
      - proto: all
        group_name: ["{{cluster_name}}-sg"]
        rule_desc: "Access from all VMs attached to the {{ cluster_name }}-sg group"
    dev:
      hosttype_vars:
        # "gen" is the "hosttype" and is used as part of the hostname
        gen: {count_per_az: 1, az: ["a", "b"], flavor: t3.micro, auto_volumes: [{"device_name": "/dev/sdb", mountpoint: "/var/log", "volume_type": "gp2", "volume_size": 2, ephemeral: False, encrypted: True, "delete_on_termination": true}]}
      aws_access_key:
      aws_secret_key:
      vpc_subnet_name_prefix: "{{buildenv}}-infrastructure-subnet"
      key_name: "{{buildenv}}-key"
      vpc_name: "{{buildenv}}"
      termination_protection: "yes"
    stage:
      hosttype_vars:
        # "gen" is the "hosttype" and is used as part of the hostname
        gen: {count_per_az: 1, az: ["a", "b"], flavor: t3.micro, auto_volumes: [{"device_name": "/dev/sdb", mountpoint: "/var/log", "volume_type": "gp2", "volume_size": 2, ephemeral: False, encrypted: True, "delete_on_termination": true}]}
      aws_access_key:
      aws_secret_key:
      vpc_subnet_name_prefix: "{{buildenv}}-infrastructure-subnet"
      key_name: "{{buildenv}}-key"
      vpc_name: "{{buildenv}}"
      termination_protection: "yes"
    prod:
      hosttype_vars:
        # "gen" is the "hosttype" and is used as part of the hostname
        gen: {count_per_az: 1, az: ["a", "b"], flavor: t3.micro, auto_volumes: [{"device_name": "/dev/sdb", mountpoint: "/var/log", "volume_type": "gp2", "volume_size": 2, ephemeral: False, encrypted: True, "delete_on_termination": true}]}
      aws_access_key:
      aws_secret_key:
      vpc_subnet_name_prefix: "{{buildenv}}-infrastructure-subnet"
      key_name: "{{buildenv}}-key"
      vpc_name: "{{buildenv}}"
      termination_protection: "yes"
    tools:
      hosttype_vars:
        # "gen" is the "hosttype" and is used as part of the hostname
        gen: {count_per_az: 1, az: ["a", "b"], flavor: t3.micro, auto_volumes: [{"device_name": "/dev/sdb", mountpoint: "/var/log", "volume_type": "gp2", "volume_size": 2, ephemeral: False, encrypted: True, "delete_on_termination": true}]}
      aws_access_key:
      aws_secret_key:
      vpc_subnet_name_prefix: "{{buildenv}}-infrastructure-subnet"
      key_name: "{{buildenv}}-key"
      vpc_name: "{{buildenv}}"
      termination_protection: "yes"
    sandbox:
      hosttype_vars:
        # "gen" is the "hosttype" and is used as part of the hostname
        gen: {count_per_az: 1, az: ["a", "b"], flavor: t3.micro, auto_volumes: []}
        #gen: {count_per_az: 1, az: ["a", "b"], flavor: t3.micro, auto_volumes: [{"device_name": "/dev/sdb", mountpoint: "/var/log", "volume_type": "gp2", "volume_size": 2, ephemeral: False, encrypted: True, "delete_on_termination": true}, {"device_name": "/dev/sdc", mountpoint: "/mnt/test2", "volume_type": "gp2", "volume_size": 2, ephemeral: False, encrypted: True, "delete_on_termination": true}, {"device_name": "/dev/sdd", mountpoint: "/mnt/test3", "volume_type": "gp2", "volume_size": 2, ephemeral: False, encrypted: True, "delete_on_termination": true}]}
      aws_access_key:
      aws_secret_key:
      vpc_name: "{{buildenv}}"
      vpc_subnet_name_prefix: "{{buildenv}}-scratch-subnet"
      key_name: "{{buildenv}}-key"
      termination_protection: "no"

  gce_eu_west1:
    type: gce
    image: "projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20181029"
#    image: "projects/ubuntu-os-cloud/global/images/ubuntu-1604-xenial-v20181030"
    region: "europe-west1"
    dns_zone_internal: "c.{{gcp_credentials_json.project_id}}.internal"
    dns_zone_external: "{%- if dns_tld_external -%} gce_euw1.{{app_class}}.{{buildenv}}.{{dns_tld_external}} {%- endif -%}"
    dns_server: ""    # Specify DNS server. nsupdate, infoblox or openstack (on openstack) supported.  If empty string is specified, no DNS will be added.
    assign_public_ip: "yes"
    inventory_ip: "public"     # 'public' or 'private', (private in case we're operating in a private LAN).  If public, 'assign_public_ip' must be 'yes'
    project_id: "{{gcp_credentials_json.project_id}}"
    ip_forward: "false"
    network_fw_tags: ["{{cluster_name}}-nwtag"]
    firewall_rules:
      - name: "{{cluster_name}}-extssh"
        allowed: [{ip_protocol: "tcp", ports: [22]}]
        source_ranges: ['10.0.0.0/8']
        description: "SSH Access"
      - name: "{{cluster_name}}-nwtag"
        allowed: [{ip_protocol: "all"}]
        source_tags: ["{{cluster_name}}-nwtag"]
        description: "Access from all VMs attached to the {{cluster_name}}-nwtag group"
    sandbox:
      hosttype_vars:
        # "qwerty" is the "hostype" and is used to reate the "host name"
        data: {count_per_az: 1, az: ["b", "c"], flavor: f1-micro, rootvol_size: "10", auto_volumes: [{"auto_delete": true, "interface": "SCSI", "disk_size_gb": 2, name: "mydata", "host_dev_name": "/dev/sdb", mountpoint: "/mnt/data"}]}
        #query: {count_per_az: 1, az: ["b", "c"], flavor: f1-micro, rootvol_size: "10", auto_volumes: []}
      vpc_network_name: "{{buildenv}}"
      vpc_subnet_name: ""
      preemptible: "false"

  m25_lsd_slo:
    type: openstack
    image: "centos7"    #OR "CentOS-7-cloudimg-x64-20170612",  "Ubuntu-1604-Xenial-cloudimg-x64-20170621"
    region: "SLO"
#    dns_zone_internal: ""
    dns_zone_external: "{%- if dns_tld_external -%}  os_m25s.{{app_class}}.{{buildenv}}.{{dns_tld_external}}  {%- endif -%}"
    dns_server: "openstack"    # Specify DNS server. infoblox or openstack (on openstack) supported.  If empty string is specified, no DNS will be added.
    dev:
      hosttype_vars:
        test: {count_per_az: 1, az: ["az1", "az2"], flavor: m1.1c.1g, rootvol_size: "10"}
    prod:
      hosttype_vars:
        test: {count_per_az: 1, az: ["az1", "az2"], flavor: m1.1c.1g, rootvol_size: "10"}
    network: "k8s_dev"
    security_group: "wide-open"
    key_name: "{{os_username}}"
    floating_ip_pools: "vlan3321"
    OS_AUTH_URL:
    OS_TENANT_ID:
    OS_TENANT_NAME:
    OS_PROJECT_NAME:
